[
    {
        "id": "820f56c5.80fdb8",
        "type": "tab",
        "label": "Notifications",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8735266c.37edc8",
        "type": "tab",
        "label": "Lighting",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3a5af8d2.8b1fa8",
        "type": "tab",
        "label": "Bathroom Lights",
        "disabled": false,
        "info": ""
    },
    {
        "id": "34229498.d69b1c",
        "type": "tab",
        "label": "Outdoor Lighting",
        "disabled": false,
        "info": ""
    },
    {
        "id": "87b2ba05.05d808",
        "type": "tab",
        "label": "Locks",
        "disabled": false,
        "info": ""
    },
    {
        "id": "67bb867f.1e3018",
        "type": "tab",
        "label": "Presence",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2ca46b92.f4ef34",
        "type": "tab",
        "label": "Telegram",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ae7a1c3d.11d2c",
        "type": "tab",
        "label": "Morning Routines",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3dfc2218.78acbe",
        "type": "tab",
        "label": "Dog",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d7b7b2ed.c0164",
        "type": "tab",
        "label": "Todoist",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cd0b9dd49c492d7a",
        "type": "tab",
        "label": "Seasonal",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eaeda760a3cb9be7",
        "type": "tab",
        "label": "Ingress",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Node-Red HealthCheck Flow",
        "disabled": false,
        "info": "# Healthcheck Flow\n\n- Provides a simple __HTTP GET__ API `/health`\n- Returns __HTTP 200__ response with body \"OK\""
    },
    {
        "id": "b8b1a9ef2a3a0b77",
        "type": "tab",
        "label": "Frigate → Telegram (mediaGroup safe)",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c7fc795b4b70c91a",
        "type": "subflow",
        "name": "Get Morning Start",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 120,
                "wires": [
                    {
                        "id": "9b46ed798a1e7290"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 120,
                "wires": [
                    {
                        "id": "9b46ed798a1e7290",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "48b7cda0f93a286f",
        "type": "junction",
        "z": "8735266c.37edc8",
        "x": 880,
        "y": 2000,
        "wires": [
            [
                "e356be88c944d555"
            ]
        ]
    },
    {
        "id": "a7a37e092155d65d",
        "type": "junction",
        "z": "8735266c.37edc8",
        "x": 140,
        "y": 2680,
        "wires": [
            [
                "619e4212da87597a"
            ]
        ]
    },
    {
        "id": "c54f6cf3bf4a2be4",
        "type": "junction",
        "z": "8735266c.37edc8",
        "x": 160,
        "y": 3140,
        "wires": [
            [
                "671762a662a4f6b3"
            ]
        ]
    },
    {
        "id": "2c1586030ffb1c8f",
        "type": "junction",
        "z": "8735266c.37edc8",
        "x": 160,
        "y": 1260,
        "wires": [
            [
                "19266153f4473fcc"
            ]
        ]
    },
    {
        "id": "d6b350e1.1151a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2e075c78.e96774",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": "at: ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "h23",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "ae47c1e5.81626",
        "type": "telegram bot",
        "botname": "MartinHABot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "f0573a7dfdc9f809",
        "type": "ical-config",
        "url": "https://p47-caldav.icloud.com:443/114758711/calendars/home/",
        "caldav": "",
        "caltype": "icloud",
        "name": "",
        "replacedates": false,
        "usecache": false,
        "username": "",
        "password": "",
        "includeTodo": false,
        "calendar": "",
        "pastWeeks": "0",
        "futureWeeks": "4"
    },
    {
        "id": "757ea1f25f0997a0",
        "type": "gauth",
        "name": "read-write-gsheet@node-red-ingress.iam.gserviceaccount.com"
    },
    {
        "id": "9b46ed798a1e7290",
        "type": "function",
        "z": "c7fc795b4b70c91a",
        "name": "function 1",
        "func": "const lat = 38.873568;\nconst long = -77.118037;\n\nfunction calculateSunrise(date, latitude, longitude) {\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n\n    // Calculate day of year\n    const N1 = Math.floor(275 * month / 9);\n    const N2 = Math.floor((month + 9) / 12);\n    const N3 = (1 + Math.floor((year - 4 * Math.floor(year / 4) + 2) / 3));\n    const N = N1 - (N2 * N3) + day - 30;\n\n    // Convert longitude to hour value and calculate approximate time\n    const lngHour = longitude / 15;\n    const t = N + ((6 - lngHour) / 24);\n\n    // Calculate sun's mean anomaly\n    const M = (0.9856 * t) - 3.289;\n\n    // Calculate sun's true longitude\n    let L = M + (1.916 * Math.sin(M * Math.PI / 180)) + (0.020 * Math.sin(2 * M * Math.PI / 180)) + 282.634;\n    L = L % 360;\n    if (L < 0) L += 360;\n\n    // Calculate sun's right ascension\n    let RA = Math.atan(0.91764 * Math.tan(L * Math.PI / 180)) * 180 / Math.PI;\n    RA = RA % 360;\n    if (RA < 0) RA += 360;\n\n    // Right ascension value needs to be in the same quadrant as L\n    const Lquadrant = (Math.floor(L / 90)) * 90;\n    const RAquadrant = (Math.floor(RA / 90)) * 90;\n    RA = RA + (Lquadrant - RAquadrant);\n    RA = RA / 15;\n\n    // Calculate sun's declination\n    const sinDec = 0.39782 * Math.sin(L * Math.PI / 180);\n    const cosDec = Math.cos(Math.asin(sinDec));\n\n    // Calculate sun's local hour angle\n    const cosH = (Math.cos(90.833 * Math.PI / 180) - (sinDec * Math.sin(latitude * Math.PI / 180))) / (cosDec * Math.cos(latitude * Math.PI / 180));\n\n    if (cosH > 1 || cosH < -1) {\n        // Sun never rises or sets at this location on this date\n        return new Date(year, month - 1, day, 6, 0, 0); // Default to 6 AM\n    }\n\n    // Calculate local mean time of rising\n    const H = (360 - Math.acos(cosH) * 180 / Math.PI) / 15;\n\n    const T = H + RA - (0.06571 * t) - 6.622;\n\n    // Adjust back to UTC\n    let UT = T - lngHour;\n    UT = UT % 24;\n    if (UT < 0) UT += 24;\n\n    const now = new Date();\n    const timezoneOffsetHours = -now.getTimezoneOffset() / 60;\n    let localTime = UT + timezoneOffsetHours;\n    if (localTime < 0) localTime += 24;\n    if (localTime >= 24) localTime -= 24;\n\n    const hours = Math.floor(localTime);\n    const minutes = Math.floor((localTime - hours) * 60);\n\n    return new Date(year, month - 1, day, hours, minutes, 0);\n}\n\n// Get today, and set time to 7:00am\nconst dayStartDefault = new Date();\ndayStartDefault.setHours(7, 0, 0, 0);\n\n// Calculate today's sunrise\nconst sunrise = calculateSunrise(new Date(), lat, long);\n\nconst morningStart = dayStartDefault < sunrise ? dayStartDefault : sunrise;\n\nmsg.payload = morningStart.toLocaleTimeString();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "1541c8cb55abb448",
        "type": "sunrise",
        "z": "c7fc795b4b70c91a",
        "name": "",
        "lat": "38.873568",
        "lon": "-77.118037",
        "start": "sunrise",
        "end": "sunset",
        "soff": 0,
        "eoff": 0,
        "sendAtStartup": true,
        "x": 190,
        "y": 240,
        "wires": [
            [],
            [
                "0720d23a1fa96b8b"
            ]
        ]
    },
    {
        "id": "0720d23a1fa96b8b",
        "type": "debug",
        "z": "c7fc795b4b70c91a",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 220,
        "wires": []
    },
    {
        "id": "76924b.ced74db4",
        "type": "ha-get-entities",
        "z": "820f56c5.80fdb8",
        "name": "Get all sensors",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "sensor",
                "valueType": "str"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 360,
        "y": 780,
        "wires": [
            [
                "b691175b.70d718"
            ]
        ]
    },
    {
        "id": "b691175b.70d718",
        "type": "function",
        "z": "820f56c5.80fdb8",
        "name": "filter to only battery_levels",
        "func": "function filter(item) {\n    return item.entity_id.match(/battery_level/); \n}\n\nmsg.payload = msg.payload.filter(filter);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 780,
        "wires": [
            [
                "36e990f0.856d6"
            ]
        ]
    },
    {
        "id": "36e990f0.856d6",
        "type": "template",
        "z": "820f56c5.80fdb8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<ul>{{#payload}}\n<li>{{{attributes.friendly_name}}} - {{{state}}}%</li>\n{{/payload}}</ul>",
        "output": "str",
        "x": 775,
        "y": 780,
        "wires": [
            [
                "5fc3bfa6.bcc63"
            ]
        ],
        "l": false
    },
    {
        "id": "fb5f7713.afe638",
        "type": "http in",
        "z": "820f56c5.80fdb8",
        "name": "",
        "url": "/battery_levels",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "76924b.ced74db4"
            ]
        ]
    },
    {
        "id": "5fc3bfa6.bcc63",
        "type": "http response",
        "z": "820f56c5.80fdb8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 780,
        "wires": []
    },
    {
        "id": "32e999ee.2dbce6",
        "type": "trigger-state",
        "z": "820f56c5.80fdb8",
        "name": "Backyard Aux Gate opened",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.aux_gate_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 160,
        "y": 840,
        "wires": [
            [
                "da742dc0.a8af6"
            ],
            []
        ]
    },
    {
        "id": "de585f1b.8947",
        "type": "telegram sender",
        "z": "820f56c5.80fdb8",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 660,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "da742dc0.a8af6",
        "type": "template",
        "z": "820f56c5.80fdb8",
        "name": "Compose message",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": [\"321474212\", \"247971390\"],\n    \"type\": \"message\",\n    \"content\": \"*ALERT:* {{{data.event.new_state.attributes.friendly_name}}} opened\",\n    \"options\": {\n        \"parse_mode\": \"Markdown\"\n    }\n}",
        "output": "json",
        "x": 415,
        "y": 900,
        "wires": [
            [
                "de585f1b.8947"
            ]
        ],
        "l": false
    },
    {
        "id": "99ea8800.758de8",
        "type": "trigger-state",
        "z": "820f56c5.80fdb8",
        "name": "Main Gate opened",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.main_gate_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 130,
        "y": 1080,
        "wires": [
            [
                "2c47b7d2.443f38"
            ],
            []
        ]
    },
    {
        "id": "26910d55.14df72",
        "type": "telegram sender",
        "z": "820f56c5.80fdb8",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 870,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "d05e1b5.2d37ae8",
        "type": "template",
        "z": "820f56c5.80fdb8",
        "name": "Compose message",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": [\"321474212\", \"247971390\"],\n    \"type\": \"message\",\n    \"content\": \"*ALERT:* Main Gate left open\",\n    \"options\": {\n        \"parse_mode\": \"Markdown\"\n    }\n}",
        "output": "json",
        "x": 675,
        "y": 1080,
        "wires": [
            [
                "26910d55.14df72"
            ]
        ],
        "l": false
    },
    {
        "id": "e1898dff.ee557",
        "type": "trigger-state",
        "z": "820f56c5.80fdb8",
        "name": "Main Gate closed",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.main_gate_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 120,
        "y": 1160,
        "wires": [
            [
                "4201e3c3.da117c"
            ],
            []
        ]
    },
    {
        "id": "2c47b7d2.443f38",
        "type": "delay",
        "z": "820f56c5.80fdb8",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 510,
        "y": 1080,
        "wires": [
            [
                "d05e1b5.2d37ae8"
            ]
        ]
    },
    {
        "id": "4201e3c3.da117c",
        "type": "change",
        "z": "820f56c5.80fdb8",
        "name": "reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 1160,
        "wires": [
            [
                "2c47b7d2.443f38"
            ]
        ]
    },
    {
        "id": "c584d4b0a5a8a77b",
        "type": "trigger-state",
        "z": "820f56c5.80fdb8",
        "name": "Front Door Opened",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.front_door_sensor_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 130,
        "y": 120,
        "wires": [
            [
                "a2109583dbf17beb",
                "87c1c8f59a5ad1a5"
            ],
            []
        ]
    },
    {
        "id": "a2109583dbf17beb",
        "type": "trigger",
        "z": "820f56c5.80fdb8",
        "name": "",
        "op1": "",
        "op2": "true",
        "op1type": "nul",
        "op2type": "bool",
        "duration": "7",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 380,
        "y": 180,
        "wires": [
            [
                "25cf16faa16308bc"
            ]
        ]
    },
    {
        "id": "87c1c8f59a5ad1a5",
        "type": "change",
        "z": "820f56c5.80fdb8",
        "name": "Set FrontDoorOpened",
        "rules": [
            {
                "t": "set",
                "p": "FrontDoorOpened",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "25cf16faa16308bc",
        "type": "change",
        "z": "820f56c5.80fdb8",
        "name": "Unset FrontDoorOpened",
        "rules": [
            {
                "t": "set",
                "p": "FrontDoorOpened",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "frigate-events",
        "type": "mqtt in",
        "z": "820f56c5.80fdb8",
        "name": "Frigate Events",
        "topic": "frigate/events",
        "qos": "0",
        "datatype": "json",
        "broker": "d6b350e1.1151a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 360,
        "wires": [
            [
                "filter-events"
            ]
        ]
    },
    {
        "id": "filter-events",
        "type": "function",
        "z": "820f56c5.80fdb8",
        "name": "Filter & Process Events",
        "func": "const event = msg.payload;\n\nif (!event || !event.after) {\n    return null;\n}\n\nconst eventData = event.after;\nconst eventType = event.type;\n\n// Process both 'end' events and 'update' events that have snapshots\nif (eventType === 'end') {\n    node.log(`Processing END event for ${eventData.label} on ${eventData.camera}`);\n} else if (eventType === 'update' && eventData.has_snapshot) {\n    node.log(`Processing UPDATE event with snapshot for ${eventData.label} on ${eventData.camera}`);\n} else {\n    return null;\n}\n\n// Only process person and dog detections\nif (!['person', 'dog'].includes(eventData.label)) {\n    return null;\n}\n\n// Only process front_door and doorbell cameras\nif (!['front_door', 'doorbell'].includes(eventData.camera)) {\n    return null;\n}\n\n// Check if we have a snapshot\nif (!eventData.has_snapshot) {\n    return null;\n}\n\nmsg.eventData = {\n    id: eventData.id,\n    camera: eventData.camera,\n    label: eventData.label,\n    confidence: eventData.top_score,\n    timestamp: Date.now(),\n    zones: eventData.entered_zones || [],\n    eventType: eventType\n};\n\nnode.log(`Processing ${eventData.label} on ${eventData.camera} (${Math.round(eventData.top_score * 100)}% confidence)`);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            [
                "smart-grouping"
            ]
        ]
    },
    {
        "id": "smart-grouping",
        "type": "function",
        "z": "820f56c5.80fdb8",
        "name": "Smart Grouping & Debounce",
        "func": "// Consolidate detections across labels (person + dog) into one group if close in time\nconst now = Date.now();\nconst entry = {\n    camera: msg.eventData.camera,\n    label: msg.eventData.label,           // 'person' or 'dog'\n    eventData: msg.eventData,\n    timestamp: now\n};\n\n// Tunables\nconst groupingWindow = 2000;   // 2s to collect \"simultaneous\" detections\nconst debounceWindow = 30000;  // 30s to avoid spamming consolidated alerts\n\n// We now use ONE group for any qualifying labels/cameras\nconst GROUP_KEY = \"group_any\";\nlet group = context.get(GROUP_KEY);\n\n// Helper to finalize and send the group\nfunction finalizeAndSend(g) {\n    if (!g || !g.entries || g.entries.length === 0) return;\n\n    // Build unique labels in the group (e.g., ['person', 'dog'])\n    const uniqueLabels = [...new Set(g.entries.map(e => e.label))];\n\n    // Build cameras array to match downstream expectations\n    const cameras = g.entries.map(e => ({\n        camera: e.camera,\n        eventData: e.eventData,\n        timestamp: e.timestamp\n    }));\n\n    const outMsg = {\n        detectionGroup: {\n            labels: uniqueLabels,      // <-- array of labels now\n            cameras,\n            count: cameras.length\n        }\n    };\n\n    node.send(outMsg);\n    context.set(\"last_any\", Date.now());\n    node.log(`Processing consolidated group [${uniqueLabels.join(\" + \")}] with ${cameras.length} event(s)`);\n}\n\nconst lastAny = context.get(\"last_any\") || 0;\n\n// Start a new group if none exists or expired\nif (!group || (now - group.firstDetection) > groupingWindow) {\n    // Debounce globally (covers both single and combined cases)\n    if (now - lastAny < debounceWindow) {\n        node.log(`Debouncing consolidated notification (${now - lastAny}ms ago)`);\n        return null;\n    }\n\n    // Start a fresh group\n    group = {\n        firstDetection: now,\n        entries: [entry],\n        timerId: null\n    };\n    context.set(GROUP_KEY, group);\n\n    // Single timer to close the window and emit ONE message\n    group.timerId = setTimeout(() => {\n        const latest = context.get(GROUP_KEY);\n        if (latest && latest.firstDetection === now) {\n            finalizeAndSend(latest);\n            // Clear group after sending\n            context.set(GROUP_KEY, null);\n        }\n    }, groupingWindow + 100);\n\n    return null;\n}\n\n// If we're still inside the grouping window, just append\ngroup.entries.push(entry);\ncontext.set(GROUP_KEY, group);\nnode.log(`Added ${entry.camera} (${entry.label}) to consolidated group (${group.entries.length} events)`);\n\n// Keep waiting until the timer fires\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 420,
        "wires": [
            [
                "check-notifications-enabled"
            ]
        ]
    },
    {
        "id": "check-notifications-enabled",
        "type": "api-current-state",
        "z": "820f56c5.80fdb8",
        "name": "Notifications Enabled?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.frigate_notifications",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 160,
        "y": 480,
        "wires": [
            [
                "bae878825a2d7617"
            ],
            []
        ]
    },
    {
        "id": "format-group-message",
        "type": "function",
        "z": "820f56c5.80fdb8",
        "name": "Format Group Message",
        "func": "const frontDoorRecentlyOpened = flow.get(\"FrontDoorOpened\") || false;\nconst group = msg.detectionGroup;\nconst snapshots = msg.snapshots;\n\nif (!group || !snapshots || snapshots.length === 0) {\n    node.warn(\"Invalid input: \" + JSON.stringify(msg));\n    return null;\n}\n\n// Support both shapes: group.labels (array) or group.label (string)\nconst labels = Array.isArray(group.labels)\n    ? group.labels\n    : (group.label ? [group.label] : []);\n\nconst hasPerson = labels.includes('person');\nconst hasDog = labels.includes('dog');\n\n// Camera names & best confidence across all snapshots\nconst cameraNames = snapshots\n  .map(s => s.camera.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase()));\n\nconst bestConfidence = Math.max(...snapshots.map(s => s.confidence || 0));\nconst confidencePercent = Math.round(bestConfidence * 100);\n\nconst locationText = cameraNames.length === 1 ? cameraNames[0] : cameraNames.join(' & ');\n\n// 🐕 PRIORITIZATION LOGIC\nlet messageText = \"\";\nif (hasDog) {\n    // Dog present (alone or with person) → dog message takes precedence\n    messageText = frontDoorRecentlyOpened\n        ? `🐕 Gabby going for a walk (${locationText})`\n        : `🐕 Dog detected at ${locationText}`;\n} else if (hasPerson) {\n    messageText = frontDoorRecentlyOpened\n        ? `🚶 Person leaving (${locationText})`\n        : `👤 Person detected at ${locationText}`;\n} else {\n    messageText = `🔎 Activity detected at ${locationText}`;\n}\n\n// Zones (unique)\nconst allZones = snapshots.flatMap(s => s.zones || []);\nconst uniqueZones = [...new Set(allZones)];\nif (uniqueZones.length > 0) {\n    messageText += `\\n📍 Zones: ${uniqueZones.join(', ')}`;\n}\n\n// Timestamp\nconst now = new Date();\nconst timeStr = now.toLocaleTimeString('en-US', { hour12: false, hour: '2-digit', minute: '2-digit' });\nmessageText += `\\n⏰ ${timeStr}`;\n\n// Output: same logic for photo count\nconst chatIds = [\"321474212\", \"247971390\"];\nconst out = [];\n\nif (snapshots.length === 1) {\n    chatIds.forEach(chatId => {\n        const m = RED.util.cloneMessage(msg);\n        m.payload = {\n            chatId,\n            type: \"photo\",\n            content: snapshots[0].image,\n            caption: messageText\n        };\n        out.push(m);\n    });\n} else if (snapshots.length === 2) {\n    chatIds.forEach(chatId => {\n        let m1 = RED.util.cloneMessage(msg);\n        m1.payload = {\n            chatId,\n            type: \"photo\",\n            content: snapshots[0].image,\n            caption: cameraNames[0]\n        };\n        out.push(m1);\n\n        let m2 = RED.util.cloneMessage(msg);\n        m2.payload = {\n            chatId,\n            type: \"photo\",\n            content: snapshots[1].image,\n            caption: messageText\n        };\n        out.push(m2);\n    });\n} else {\n    chatIds.forEach(chatId => {\n        const m = RED.util.cloneMessage(msg);\n        m.payload = {\n            chatId,\n            type: \"photo\",\n            content: snapshots[0].image,\n            caption: messageText\n        };\n        out.push(m);\n    });\n}\n\nnode.log(`Sending ${out.length} photo message(s) for [${labels.join(' + ') || 'unknown'}] at ${locationText} (${confidencePercent}%)`);\nreturn [out];\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 440,
        "wires": [
            [
                "send-telegram"
            ]
        ]
    },
    {
        "id": "send-telegram",
        "type": "telegram sender",
        "z": "820f56c5.80fdb8",
        "name": "Send Telegram",
        "bot": "ae47c1e5.81626",
        "haserroroutput": true,
        "outputs": 2,
        "x": 800,
        "y": 520,
        "wires": [
            [
                "success-log"
            ],
            [
                "error-log"
            ]
        ]
    },
    {
        "id": "success-log",
        "type": "debug",
        "z": "820f56c5.80fdb8",
        "name": "Success",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 500,
        "wires": []
    },
    {
        "id": "error-log",
        "type": "debug",
        "z": "820f56c5.80fdb8",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "bae878825a2d7617",
        "type": "function",
        "z": "820f56c5.80fdb8",
        "name": "Prepare Snapshot Requests",
        "func": "// Prepare Snapshot Requests (one snapshot per camera)\nconst group = msg.detectionGroup;\n\nif (!group || !group.cameras || group.cameras.length === 0) {\n    node.error('No cameras in detection group');\n    return null;\n}\n\n// Support both shapes: group.labels (array) or group.label (string)\nconst labels = Array.isArray(group.labels)\n    ? group.labels\n    : (group.label ? [group.label] : []);\nconst labelText = labels.length ? labels.join(\" + \") : \"unknown\";\n\n// --- NEW: collapse multiple detections from the SAME camera into a single snapshot request ---\n// Keep the entry with the highest confidence per camera (or the latest if equal)\nconst bestByCamera = {};\nfor (const entry of group.cameras) {\n    const cam = entry.camera;\n    const conf = entry.eventData?.confidence ?? 0;\n    if (!bestByCamera[cam] || conf >= (bestByCamera[cam].eventData?.confidence ?? 0)) {\n        bestByCamera[cam] = entry;\n    }\n}\n\n// Build snapshot requests in a stable order: front_door first if present, then doorbell, then others\nconst preferredOrder = [\"front_door\", \"doorbell\"];\nconst deduped = Object.values(bestByCamera).sort((a, b) => {\n    const ia = preferredOrder.indexOf(a.camera);\n    const ib = preferredOrder.indexOf(b.camera);\n    if (ia !== -1 && ib !== -1) return ia - ib;\n    if (ia !== -1) return -1;\n    if (ib !== -1) return 1;\n    return a.camera.localeCompare(b.camera);\n});\n\nconst snapshotRequests = deduped.map((cameraData, index) => ({\n    url: `http://frigate:5000/api/events/${cameraData.eventData.id}/snapshot.jpg?quality=95&h=720`,\n    camera: cameraData.camera,\n    confidence: cameraData.eventData.confidence,\n    zones: cameraData.eventData.zones,\n    index,\n    eventId: cameraData.eventData.id\n}));\n\nmsg.snapshotRequests = snapshotRequests;\nmsg.snapshots = [];\nmsg.currentIndex = 0;\nmsg.detectionGroup = group;\n\nnode.log(`Preparing to fetch ${snapshotRequests.length} snapshot(s) for [${labelText}] from camera(s): ${deduped.map(d => d.camera).join(\", \")}`);\n\nif (snapshotRequests.length > 0) {\n    msg.url = snapshotRequests[0].url;\n    msg.method = \"GET\";\n    msg.headers = { \"Accept\": \"image/jpeg\" };\n    msg.currentRequest = snapshotRequests[0];\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 540,
        "wires": [
            [
                "http-request-snapshot"
            ]
        ]
    },
    {
        "id": "http-request-snapshot",
        "type": "http request",
        "z": "820f56c5.80fdb8",
        "name": "HTTP Get Snapshot",
        "method": "use",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 520,
        "y": 540,
        "wires": [
            [
                "process-snapshot"
            ]
        ]
    },
    {
        "id": "process-snapshot",
        "type": "function",
        "z": "820f56c5.80fdb8",
        "name": "Process & Queue Next",
        "func": "// Process the received snapshot\nconst imageBuffer = msg.payload;\nconst currentRequest = msg.currentRequest;\nconst snapshotRequests = msg.snapshotRequests;\nconst currentIndex = msg.currentIndex;\n\nlet valid = false;\n\n// Validate the image\nif (!imageBuffer || imageBuffer.length < 5000) {\n    node.warn(`❌ Invalid image from ${currentRequest.camera}: ${imageBuffer ? imageBuffer.length : 0} bytes`);\n} else if (imageBuffer[0] !== 0xFF || imageBuffer[1] !== 0xD8) {\n    node.warn(`❌ Invalid JPEG header from ${currentRequest.camera}`);\n} else {\n    // Valid image\n    msg.snapshots.push({\n        camera: currentRequest.camera,\n        confidence: currentRequest.confidence,\n        zones: currentRequest.zones,\n        image: imageBuffer,\n        index: currentRequest.index\n    });\n    node.log(`✅ Collected snapshot ${currentIndex + 1}/${snapshotRequests.length} from ${currentRequest.camera}`);\n    valid = true;\n}\n\n// Check if we have more snapshots to fetch\nif (currentIndex + 1 < snapshotRequests.length) {\n    // Prepare next request\n    msg.currentIndex = currentIndex + 1;\n    const nextRequest = snapshotRequests[msg.currentIndex];\n\n    msg.url = nextRequest.url;\n    msg.method = \"GET\";\n    msg.headers = { \"Accept\": \"image/jpeg\" };\n    msg.currentRequest = nextRequest;\n\n    return [null, msg]; // Output 2 → HTTP request\n} else {\n    // All snapshots collected\n    if (msg.snapshots.length === 0) {\n        node.error(`⚠️ No valid snapshots collected for group \"${msg.detectionGroup.label}\". Sending event anyway.`);\n        // Push a placeholder so downstream still has data\n        msg.snapshots = [{\n            camera: currentRequest.camera,\n            confidence: currentRequest.confidence,\n            zones: currentRequest.zones,\n            image: null, // no image\n            index: currentRequest.index\n        }];\n    }\n\n    // Sort snapshots by original index\n    msg.snapshots.sort((a, b) => a.index - b.index);\n\n    node.log(`📸 Completed: ${msg.snapshots.length}/${snapshotRequests.length} snapshots collected`);\n\n    // Clean up temporary properties\n    delete msg.currentIndex;\n    delete msg.currentRequest;\n    delete msg.snapshotRequests;\n    delete msg.url;\n    delete msg.method;\n    delete msg.headers;\n    delete msg.statusCode;\n    delete msg.responseUrl;\n    delete msg.redirectList;\n    delete msg.retry;\n\n    // Continue to format message\n    return [msg, null]; // Output 1 → format message\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 440,
        "wires": [
            [
                "format-group-message"
            ],
            [
                "http-request-snapshot"
            ]
        ]
    },
    {
        "id": "15124085.2e693f",
        "type": "schedex",
        "z": "8735266c.37edc8",
        "name": "Sunset to 3:00 am",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "-30",
        "onrandomoffset": 0,
        "offtime": "03:00",
        "offtopic": "",
        "offpayload": "off",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "67975d2251a04612"
            ]
        ]
    },
    {
        "id": "d7060276.e9418",
        "type": "looptimer2",
        "z": "8735266c.37edc8",
        "duration": "15",
        "units": "Minute",
        "maxloops": "3",
        "maxtimeout": "1",
        "maxtimeoutunits": "Hour",
        "name": "Loop every 15 minutes",
        "x": 880,
        "y": 320,
        "wires": [
            [
                "a8b6ced5.9d236"
            ],
            []
        ]
    },
    {
        "id": "a8b6ced5.9d236",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Decrease Briightness 5%",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.living_room_lights"
        ],
        "labelId": [],
        "data": "{\"brightness_step_pct\":-5}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 1170,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "6fdcf021.6829f",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Living Room Lights on",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.living_room_lights"
        ],
        "labelId": [],
        "data": "{\"brightness_pct\": 40}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 620,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "34c3fbe8.1e8974",
        "type": "delay",
        "z": "8735266c.37edc8",
        "name": "Delay 45 minutes",
        "pauseType": "delay",
        "timeout": "45",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 590,
        "y": 320,
        "wires": [
            [
                "d7060276.e9418"
            ]
        ]
    },
    {
        "id": "8463edbf.7534",
        "type": "schedex",
        "z": "8735266c.37edc8",
        "name": "Evening",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "-30",
        "onrandomoffset": 0,
        "offtime": "00:00",
        "offtopic": "",
        "offpayload": "off",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 300,
        "wires": [
            [
                "ce40d4fd.f2f4c8"
            ]
        ]
    },
    {
        "id": "ce40d4fd.f2f4c8",
        "type": "switch",
        "z": "8735266c.37edc8",
        "name": "On / Off",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 300,
        "wires": [
            [
                "6fdcf021.6829f",
                "34c3fbe8.1e8974"
            ],
            [
                "86fa0f9a.2b2de"
            ]
        ]
    },
    {
        "id": "86fa0f9a.2b2de",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Living Room Lights off",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.living_room_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 620,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "bddb31eb.05c2b",
        "type": "schedex",
        "z": "8735266c.37edc8",
        "name": "Bedtime",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "21:00",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 660,
        "wires": [
            [
                "d466ebde.bb2938",
                "ad32c147.b724f",
                "8d1d2a55.cf3ab8"
            ]
        ]
    },
    {
        "id": "d466ebde.bb2938",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Bedroom",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.bedroom_overhead_lights"
        ],
        "labelId": [],
        "data": "{\"brightness_pct\":35}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 340,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "3feb02ad.6dedde",
        "type": "ha-get-entities",
        "z": "8735266c.37edc8",
        "name": "Get all lights",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.",
                "valueType": "str"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 290,
        "y": 920,
        "wires": [
            [
                "2a74a7b6.da6308"
            ]
        ]
    },
    {
        "id": "ce9db64a.51b828",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn off light",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{payload.entity_id}}"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "data"
            }
        ],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 750,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "2a74a7b6.da6308",
        "type": "split",
        "z": "8735266c.37edc8",
        "name": "for every light...",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 500,
        "y": 920,
        "wires": [
            [
                "127976f9e39474be"
            ]
        ]
    },
    {
        "id": "8b3f16e0.21ab98",
        "type": "schedex",
        "z": "8735266c.37edc8",
        "name": "Midnight",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "00:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 920,
        "wires": [
            [
                "3feb02ad.6dedde"
            ]
        ]
    },
    {
        "id": "7d515895.daf788",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn porch light on from sunset to 3:00 am",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": []
    },
    {
        "id": "cccbfcdd.cffee",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn off all lights (except bathroom lights) at midnight",
        "info": "",
        "x": 240,
        "y": 880,
        "wires": []
    },
    {
        "id": "35d73319.1c9a2c",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn bedroom overhead lights on at 9:30 pm",
        "info": "",
        "x": 210,
        "y": 620,
        "wires": []
    },
    {
        "id": "3b893f5.5910ec",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn on lights in living room at sunset, and gradually reduce brightness",
        "info": "",
        "x": 290,
        "y": 220,
        "wires": []
    },
    {
        "id": "26f04c36.ddf7e4",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Kitchen Lights on",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.kitchen_overhead_lights",
            "light.casual_dining_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 380,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "d2e70e41.e9ab9",
        "type": "schedex",
        "z": "8735266c.37edc8",
        "name": "Evening",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "-30",
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 520,
        "wires": [
            [
                "26f04c36.ddf7e4"
            ]
        ]
    },
    {
        "id": "92e65898.db9298",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn on Kitchen Overhead and Casual Dining Lights on at Sunset",
        "info": "",
        "x": 270,
        "y": 480,
        "wires": []
    },
    {
        "id": "d64dd39c.2f962",
        "type": "trigger-state",
        "z": "8735266c.37edc8",
        "name": "Backdoor Opened",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.back_door_sensor_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 130,
        "y": 1580,
        "wires": [
            [
                "d45fb0e8.52cd3",
                "e87547e0.7587a8"
            ],
            []
        ]
    },
    {
        "id": "ae8d20cb.82b9c",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn on Backyard Porch Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.backyard_porch"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 690,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "2378beb8.4d6a92",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn backyard porch lights on when door is opened",
        "info": "",
        "x": 230,
        "y": 1540,
        "wires": []
    },
    {
        "id": "d45fb0e8.52cd3",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunset",
        "endTime": "sunrise",
        "startOffset": 0,
        "endOffset": 0,
        "x": 380,
        "y": 1580,
        "wires": [
            [
                "ae8d20cb.82b9c"
            ],
            []
        ]
    },
    {
        "id": "6f318c96.667204",
        "type": "trigger",
        "z": "8735266c.37edc8",
        "name": "Wait for 10 minutes",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 1740,
        "wires": [
            [
                "29898aaa.3ba766"
            ]
        ]
    },
    {
        "id": "29898aaa.3ba766",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn off Backyard Porch Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.backyard_porch"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 690,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "30dc4f58.a88688",
        "type": "trigger-state",
        "z": "8735266c.37edc8",
        "name": "Backdoor Closed",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.back_door_sensor_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 120,
        "y": 1740,
        "wires": [
            [
                "6f318c96.667204"
            ],
            []
        ]
    },
    {
        "id": "5312525c.bb7b84",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn backyard porch lights off when door is closed, after a 10 minute delay",
        "info": "",
        "x": 300,
        "y": 1700,
        "wires": []
    },
    {
        "id": "e87547e0.7587a8",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 255,
        "y": 1640,
        "wires": [
            [
                "6f318c96.667204"
            ]
        ],
        "l": false
    },
    {
        "id": "ad32c147.b724f",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "Guests?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.guest_mode",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 340,
        "y": 720,
        "wires": [
            [
                "64241dc8.b7f184"
            ],
            []
        ]
    },
    {
        "id": "64241dc8.b7f184",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn on overhead lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.guest_bedroom_overhead_lights"
        ],
        "labelId": [],
        "data": "{\"brightness_pct\":50}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 610,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "8d1d2a55.cf3ab8",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "Cameron?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.cameron_mode",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 350,
        "y": 780,
        "wires": [
            [
                "1a4816a7.65edc9"
            ],
            []
        ]
    },
    {
        "id": "1a4816a7.65edc9",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn on overhead lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.camerons_room_fan_light"
        ],
        "labelId": [],
        "data": "{\"brightness_pct\":100}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 610,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "67975d2251a04612",
        "type": "switch",
        "z": "8735266c.37edc8",
        "name": "On / Off",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 120,
        "wires": [
            [
                "1feab43f82e05051"
            ],
            [
                "c91f2495217c87ea"
            ]
        ]
    },
    {
        "id": "1feab43f82e05051",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Front Porch Lights on to 50%",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.front_porch_lights"
        ],
        "labelId": [],
        "data": "{\"brightness_pct\": 50}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 660,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c91f2495217c87ea",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Front Porch Lights off",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.front_porch_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 640,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "df9ba432ba22e996",
        "type": "server-state-changed",
        "z": "8735266c.37edc8",
        "name": "Front Door Unlocked",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "lock.front_door"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "unlocked",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 120,
        "y": 1940,
        "wires": [
            [
                "989e8171c7130332",
                "d65029eb90b1b49b"
            ],
            []
        ]
    },
    {
        "id": "989e8171c7130332",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunset",
        "endTime": "sunrise",
        "startOffset": "-30",
        "endOffset": 0,
        "x": 380,
        "y": 1940,
        "wires": [
            [
                "84a86bbd723d1ea2"
            ],
            []
        ]
    },
    {
        "id": "84a86bbd723d1ea2",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn on Foyer Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.foyer_lights"
        ],
        "labelId": [],
        "data": "{\"brightness_pct\": 75}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 840,
        "y": 1940,
        "wires": [
            [
                "48b7cda0f93a286f"
            ]
        ]
    },
    {
        "id": "e356be88c944d555",
        "type": "trigger",
        "z": "8735266c.37edc8",
        "name": "10 minutes",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 270,
        "y": 2080,
        "wires": [
            [
                "bc85fdf354c46833"
            ]
        ]
    },
    {
        "id": "bc85fdf354c46833",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn off Foyer Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.foyer_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 520,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "d357d211deaed3f8",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Office Lights on",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.office_lights"
        ],
        "labelId": [],
        "data": "{\"brightness_pct\":\"70\"}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 800,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "b6f5f87b2b694c91",
        "type": "schedex",
        "z": "8735266c.37edc8",
        "name": "Evening",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "-30",
        "onrandomoffset": 0,
        "offtime": "19:00",
        "offtopic": "",
        "offpayload": "off",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": false,
        "sun": false,
        "x": 90,
        "y": 2240,
        "wires": [
            [
                "b11ae1a4f2b08eab"
            ]
        ]
    },
    {
        "id": "3a605eaab93aafea",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn on Office Lights on weekdays",
        "info": "",
        "x": 170,
        "y": 2200,
        "wires": []
    },
    {
        "id": "345bc2ed6af7981e",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "100%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "99",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 2620,
        "wires": [
            [
                "bf83b734f3114239"
            ]
        ]
    },
    {
        "id": "7005aad2e802292a",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "50%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "50",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 2680,
        "wires": [
            [
                "bf83b734f3114239"
            ]
        ]
    },
    {
        "id": "34e816d1bf411e8e",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "10%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "10",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 2740,
        "wires": [
            [
                "bf83b734f3114239"
            ]
        ]
    },
    {
        "id": "f12e9c0e4919cd43",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Set Brightness level, depending on time of day",
        "info": "",
        "x": 200,
        "y": 2540,
        "wires": []
    },
    {
        "id": "bf83b734f3114239",
        "type": "template",
        "z": "8735266c.37edc8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"data\": {\n        \"brightness_pct\": {{topic}}\n    }\n}",
        "output": "json",
        "x": 885,
        "y": 2680,
        "wires": [
            [
                "10220e481ff818bc"
            ]
        ],
        "l": false
    },
    {
        "id": "10220e481ff818bc",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Bedroom Closet Lights on",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.bedroom_closet_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 990,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "b11ae1a4f2b08eab",
        "type": "switch",
        "z": "8735266c.37edc8",
        "name": "On / Off",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 2240,
        "wires": [
            [
                "3ae4cf52248f2d4e"
            ],
            [
                "d47b0a995849777e"
            ]
        ]
    },
    {
        "id": "d47b0a995849777e",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Office Lights off",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.office_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 540,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "3ae4cf52248f2d4e",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "Work Hours",
        "lat": "",
        "lon": "",
        "startTime": "08:00",
        "endTime": "18:30",
        "startOffset": 0,
        "endOffset": 0,
        "x": 530,
        "y": 2200,
        "wires": [
            [
                "d357d211deaed3f8"
            ],
            []
        ]
    },
    {
        "id": "b5e4890fe11f090d",
        "type": "inject",
        "z": "8735266c.37edc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "67975d2251a04612"
            ]
        ]
    },
    {
        "id": "2386dc895c969c8e",
        "type": "server-state-changed",
        "z": "8735266c.37edc8",
        "name": "Laundry Sensor",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.laundry_room_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 120,
        "y": 2960,
        "wires": [
            [
                "4fd2b611e9f5ecaf"
            ]
        ]
    },
    {
        "id": "4fd2b611e9f5ecaf",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Laundry Room Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_{{payload}}",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.laundry_room_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_{{payload}}",
        "x": 440,
        "y": 2960,
        "wires": [
            []
        ]
    },
    {
        "id": "90228d7139fe4047",
        "type": "server-state-changed",
        "z": "8735266c.37edc8",
        "name": "Kitchen Motion",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.kitchen_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 120,
        "y": 3080,
        "wires": [
            [
                "8ae16d48e50a96cd"
            ],
            []
        ]
    },
    {
        "id": "671762a662a4f6b3",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunrise",
        "endTime": "sunset",
        "startOffset": 0,
        "endOffset": "-30",
        "x": 120,
        "y": 3200,
        "wires": [
            [
                "35ccbfec7dbbad70",
                "927fac3f5fe57baf",
                "7a8af0c815b4c475"
            ],
            []
        ]
    },
    {
        "id": "d9f73d49550fc1af",
        "type": "trigger",
        "z": "8735266c.37edc8",
        "name": "30 Minutes",
        "op1": "",
        "op2": "off",
        "op1type": "nul",
        "op2type": "str",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 750,
        "y": 3240,
        "wires": [
            [
                "bd3de40feb831693"
            ]
        ]
    },
    {
        "id": "c72f19696a069197",
        "type": "schedex",
        "z": "8735266c.37edc8",
        "name": "Sunset",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "-30",
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 3360,
        "wires": [
            [
                "196876e33956de84"
            ]
        ]
    },
    {
        "id": "196876e33956de84",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "Send Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 3360,
        "wires": [
            [
                "d9f73d49550fc1af"
            ]
        ]
    },
    {
        "id": "cd4ef2014db8f7a6",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Kitchen Lights on",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.kitchen_overhead_lights",
            "light.casual_dining_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 780,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "bd3de40feb831693",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Kitchen Lights off",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.kitchen_overhead_lights",
            "light.casual_dining_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 980,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "35ccbfec7dbbad70",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "Is Kitchen Dim?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "55",
        "halt_if_type": "num",
        "halt_if_compare": "lte",
        "entity_id": "sensor.kitchen_sensor_illuminance",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 420,
        "y": 3140,
        "wires": [
            [
                "cd4ef2014db8f7a6",
                "d9f73d49550fc1af"
            ],
            []
        ]
    },
    {
        "id": "7813a0d0e5842ec0",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Cancel trigger if active at sunset",
        "info": "",
        "x": 170,
        "y": 3320,
        "wires": []
    },
    {
        "id": "927fac3f5fe57baf",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "Overhead lights on?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "light.kitchen_overhead_lights",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 440,
        "y": 3200,
        "wires": [
            [
                "d9f73d49550fc1af"
            ],
            []
        ]
    },
    {
        "id": "7a8af0c815b4c475",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "Casual Dining lights on?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "light.casual_dining_lights",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 450,
        "y": 3260,
        "wires": [
            [
                "d9f73d49550fc1af"
            ],
            []
        ]
    },
    {
        "id": "72694c2e5a1ab82f",
        "type": "trigger-state",
        "z": "8735266c.37edc8",
        "name": "Basement Door Opened",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.basement_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 150,
        "y": 3600,
        "wires": [
            [
                "82723d45585dca6f",
                "c5c470b484f1d3fc"
            ],
            []
        ]
    },
    {
        "id": "c5c470b484f1d3fc",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn on Basement Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.basement_bar_lights",
            "light.basement_stairs"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 490,
        "y": 3600,
        "wires": [
            []
        ]
    },
    {
        "id": "74b64f2d94b0749e",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn basement ights on when basement door is opened",
        "info": "",
        "x": 240,
        "y": 3560,
        "wires": []
    },
    {
        "id": "f3df07c299b90dae",
        "type": "trigger",
        "z": "8735266c.37edc8",
        "name": "Wait for 10 minutes",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 3720,
        "wires": [
            [
                "2c2d4b23fe7ddf26"
            ]
        ]
    },
    {
        "id": "2c2d4b23fe7ddf26",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn off Basement Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.basement_bar_lights",
            "light.basement_stairs"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 750,
        "y": 3720,
        "wires": [
            []
        ]
    },
    {
        "id": "196bae662a16e22e",
        "type": "trigger-state",
        "z": "8735266c.37edc8",
        "name": "Basement Door Closed",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.basement_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 140,
        "y": 3720,
        "wires": [
            [
                "f3df07c299b90dae"
            ],
            []
        ]
    },
    {
        "id": "b6de223537740375",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn basement lights off when door is closed, after a 10 minute delay",
        "info": "",
        "x": 290,
        "y": 3680,
        "wires": []
    },
    {
        "id": "82723d45585dca6f",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 305,
        "y": 3640,
        "wires": [
            [
                "f3df07c299b90dae"
            ]
        ],
        "l": false
    },
    {
        "id": "a5cb94c1b7c4d085",
        "type": "trigger-state",
        "z": "8735266c.37edc8",
        "name": "Bedroom Closet Activity",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.bedroom_closet_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 130,
        "y": 2580,
        "wires": [
            [
                "ee2f2546dc282847",
                "7dc733e761bff0df",
                "a7a37e092155d65d"
            ],
            []
        ]
    },
    {
        "id": "6a4070d47cb40308",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "Day",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunrise",
        "endTime": "sunset",
        "startOffset": 0,
        "endOffset": "00:30:00",
        "x": 550,
        "y": 2620,
        "wires": [
            [
                "345bc2ed6af7981e"
            ],
            []
        ]
    },
    {
        "id": "ee2f2546dc282847",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "Evening",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunset",
        "endTime": "22:59:59",
        "startOffset": "00:30:01",
        "endOffset": 0,
        "x": 560,
        "y": 2680,
        "wires": [
            [
                "7005aad2e802292a"
            ],
            []
        ]
    },
    {
        "id": "0d3fd074dac00e97",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "Night",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "23:00",
        "endTime": "sunrise",
        "startOffset": 0,
        "endOffset": 0,
        "x": 550,
        "y": 2740,
        "wires": [
            [
                "34e816d1bf411e8e"
            ],
            []
        ]
    },
    {
        "id": "619e4212da87597a",
        "type": "trigger",
        "z": "8735266c.37edc8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "90",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 370,
        "y": 2840,
        "wires": [
            [
                "e79bb7bb2fa2e8ca"
            ]
        ]
    },
    {
        "id": "e79bb7bb2fa2e8ca",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn off Bedroom Closet Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.bedroom_closet_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 650,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "79ad8b44bb10506b",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn lights off after 90 seconds",
        "info": "",
        "x": 430,
        "y": 2800,
        "wires": []
    },
    {
        "id": "ae29a072ca86ae89",
        "type": "server-state-changed",
        "z": "8735266c.37edc8",
        "name": "Attic Sensor",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.attic_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 110,
        "y": 3840,
        "wires": [
            [
                "81389f6fe664e936"
            ]
        ]
    },
    {
        "id": "b43f53228c4a76d5",
        "type": "inject",
        "z": "8735266c.37edc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 3440,
        "wires": [
            [
                "196876e33956de84"
            ]
        ]
    },
    {
        "id": "029b376373f1db33",
        "type": "server-state-changed",
        "z": "8735266c.37edc8",
        "name": "Front Door Opened",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.front_door_sensor_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "on",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 110,
        "y": 2000,
        "wires": [
            [
                "989e8171c7130332",
                "d65029eb90b1b49b"
            ],
            []
        ]
    },
    {
        "id": "d65029eb90b1b49b",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunrise",
        "endTime": "sunset",
        "startOffset": 0,
        "endOffset": 0,
        "x": 380,
        "y": 2000,
        "wires": [
            [
                "e5e9dfd754743d63"
            ],
            []
        ]
    },
    {
        "id": "e5e9dfd754743d63",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "Is Kitchen Dim?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "55",
        "halt_if_type": "num",
        "halt_if_compare": "lte",
        "entity_id": "sensor.kitchen_sensor_illuminance",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 600,
        "y": 2000,
        "wires": [
            [
                "84a86bbd723d1ea2"
            ],
            []
        ]
    },
    {
        "id": "8682b4905379cab6",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "Is Kitchen Dim?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "55",
        "halt_if_type": "num",
        "halt_if_compare": "lte",
        "entity_id": "sensor.kitchen_sensor_illuminance",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 320,
        "y": 1860,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "310ce4c9598d3aa4",
        "type": "inject",
        "z": "8735266c.37edc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1860,
        "wires": [
            [
                "8682b4905379cab6",
                "d65029eb90b1b49b"
            ]
        ]
    },
    {
        "id": "127976f9e39474be",
        "type": "switch",
        "z": "8735266c.37edc8",
        "name": "Skip Bathroom Lights",
        "property": "payload.entity_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "cont",
                "v": "bath",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "light.front_porch_lights",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 520,
        "y": 980,
        "wires": [
            [
                "ce9db64a.51b828"
            ],
            [],
            []
        ]
    },
    {
        "id": "bae8ce3bbc3fdccf",
        "type": "inject",
        "z": "8735266c.37edc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "3feb02ad.6dedde"
            ]
        ]
    },
    {
        "id": "81389f6fe664e936",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Attic Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_{{payload}}",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.attic_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_{{payload}}",
        "x": 350,
        "y": 3840,
        "wires": [
            []
        ]
    },
    {
        "id": "8ae16d48e50a96cd",
        "type": "subflow:c7fc795b4b70c91a",
        "z": "8735266c.37edc8",
        "name": "",
        "x": 330,
        "y": 3080,
        "wires": [
            [
                "9782c6d92fb0ce36"
            ]
        ]
    },
    {
        "id": "7dc733e761bff0df",
        "type": "subflow:c7fc795b4b70c91a",
        "z": "8735266c.37edc8",
        "name": "",
        "x": 290,
        "y": 2680,
        "wires": [
            [
                "cb9e213e873f928f",
                "d8f7549b39ac0aa4"
            ]
        ]
    },
    {
        "id": "cb9e213e873f928f",
        "type": "template",
        "z": "8735266c.37edc8",
        "name": "",
        "field": "__config",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"startTime\": \"{{payload}}\"\n}",
        "output": "json",
        "x": 445,
        "y": 2620,
        "wires": [
            [
                "6a4070d47cb40308"
            ]
        ],
        "l": false
    },
    {
        "id": "d8f7549b39ac0aa4",
        "type": "template",
        "z": "8735266c.37edc8",
        "name": "",
        "field": "__config",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"endTime\": \"{{payload}}\"\n}",
        "output": "json",
        "x": 445,
        "y": 2740,
        "wires": [
            [
                "0d3fd074dac00e97"
            ]
        ],
        "l": false
    },
    {
        "id": "9782c6d92fb0ce36",
        "type": "template",
        "z": "8735266c.37edc8",
        "name": "",
        "field": "__config",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"startTime\": \"{{payload}}\"\n}",
        "output": "json",
        "x": 475,
        "y": 3080,
        "wires": [
            [
                "c54f6cf3bf4a2be4"
            ]
        ],
        "l": false
    },
    {
        "id": "e9b932d437a733d6",
        "type": "debug",
        "z": "8735266c.37edc8",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 3900,
        "wires": []
    },
    {
        "id": "2e92ce30914c9dd8",
        "type": "server-state-changed",
        "z": "8735266c.37edc8",
        "name": "",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.basement_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 340,
        "y": 3960,
        "wires": [
            [
                "e9b932d437a733d6"
            ]
        ]
    },
    {
        "id": "e826ba9dcb54e602",
        "type": "inject",
        "z": "8735266c.37edc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 3900,
        "wires": [
            [
                "f763f28b5b64f728"
            ]
        ]
    },
    {
        "id": "f763f28b5b64f728",
        "type": "api-current-state",
        "z": "8735266c.37edc8",
        "name": "",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "binary_sensor.basement_sensor_window_door_is_open",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 470,
        "y": 3900,
        "wires": [
            [
                "e9b932d437a733d6"
            ]
        ]
    },
    {
        "id": "b3c3b34c12417e48",
        "type": "trigger-state",
        "z": "8735266c.37edc8",
        "name": "",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 0,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.basement_sensor_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": ""
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": false,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 340,
        "y": 4020,
        "wires": [
            [
                "e9b932d437a733d6"
            ],
            []
        ]
    },
    {
        "id": "6a5aab6dfa565b0c",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "100%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "99",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1200,
        "wires": [
            [
                "78aa560aae73f2e4"
            ]
        ]
    },
    {
        "id": "b5a289748844bdf9",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "50%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "50",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1260,
        "wires": [
            [
                "78aa560aae73f2e4"
            ]
        ]
    },
    {
        "id": "b132b240986c22fd",
        "type": "change",
        "z": "8735266c.37edc8",
        "name": "10%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "10",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1320,
        "wires": [
            [
                "78aa560aae73f2e4"
            ]
        ]
    },
    {
        "id": "4f8df3777b85bb25",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Set Brightness level, depending on time of day",
        "info": "",
        "x": 220,
        "y": 1120,
        "wires": []
    },
    {
        "id": "78aa560aae73f2e4",
        "type": "template",
        "z": "8735266c.37edc8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"data\": {\n        \"brightness_pct\": {{topic}}\n    }\n}",
        "output": "json",
        "x": 905,
        "y": 1260,
        "wires": [
            [
                "a02453a4da13298e"
            ]
        ],
        "l": false
    },
    {
        "id": "a02453a4da13298e",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn Bedroom Closet Lights on",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.nursery_fan_light"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 1010,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "cd61908e0bcf8d13",
        "type": "trigger-state",
        "z": "8735266c.37edc8",
        "d": true,
        "name": "Nursery Room Activity",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.nursery_sensor_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 140,
        "y": 1160,
        "wires": [
            [
                "9d209ca6628157e0",
                "a10b97a70f8acfaa",
                "2c1586030ffb1c8f"
            ],
            []
        ]
    },
    {
        "id": "a12bf9c0441ac280",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "Day",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunrise",
        "endTime": "sunset",
        "startOffset": 0,
        "endOffset": "00:30:00",
        "x": 570,
        "y": 1200,
        "wires": [
            [
                "6a5aab6dfa565b0c"
            ],
            []
        ]
    },
    {
        "id": "9d209ca6628157e0",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "Evening",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunset",
        "endTime": "22:59:59",
        "startOffset": "00:30:01",
        "endOffset": 0,
        "x": 580,
        "y": 1260,
        "wires": [
            [
                "b5a289748844bdf9"
            ],
            []
        ]
    },
    {
        "id": "85f2b0433b937cdb",
        "type": "time-range-switch",
        "z": "8735266c.37edc8",
        "name": "Night",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "23:00",
        "endTime": "sunrise",
        "startOffset": 0,
        "endOffset": 0,
        "x": 570,
        "y": 1320,
        "wires": [
            [
                "b132b240986c22fd"
            ],
            []
        ]
    },
    {
        "id": "19266153f4473fcc",
        "type": "trigger",
        "z": "8735266c.37edc8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "10",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 1420,
        "wires": [
            [
                "1921105b8916f81a"
            ]
        ]
    },
    {
        "id": "1921105b8916f81a",
        "type": "api-call-service",
        "z": "8735266c.37edc8",
        "name": "Turn off Bedroom Closet Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.nursery_fan_light"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 670,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "89b567e3d8c7867c",
        "type": "comment",
        "z": "8735266c.37edc8",
        "name": "Turn lights off after 90 seconds",
        "info": "",
        "x": 450,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a10b97a70f8acfaa",
        "type": "subflow:c7fc795b4b70c91a",
        "z": "8735266c.37edc8",
        "name": "",
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "e1c84fc0755f6ed9",
                "d546f3ec4e5de25e"
            ]
        ]
    },
    {
        "id": "e1c84fc0755f6ed9",
        "type": "template",
        "z": "8735266c.37edc8",
        "name": "",
        "field": "__config",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"startTime\": \"{{payload}}\"\n}",
        "output": "json",
        "x": 465,
        "y": 1200,
        "wires": [
            [
                "a12bf9c0441ac280"
            ]
        ],
        "l": false
    },
    {
        "id": "d546f3ec4e5de25e",
        "type": "template",
        "z": "8735266c.37edc8",
        "name": "",
        "field": "__config",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"endTime\": \"{{payload}}\"\n}",
        "output": "json",
        "x": 465,
        "y": 1320,
        "wires": [
            [
                "85f2b0433b937cdb"
            ]
        ],
        "l": false
    },
    {
        "id": "c4bb7e86.3e152",
        "type": "trigger-state",
        "z": "3a5af8d2.8b1fa8",
        "name": "Bathroom Sensor",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.bathroom_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 130,
        "y": 60,
        "wires": [
            [
                "7e652dbf.3b6764",
                "4f88cd2d.03a384",
                "ccf07c9b616b8be5"
            ],
            []
        ]
    },
    {
        "id": "149155e3.ad0d0a",
        "type": "time-range-switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "Day",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunrise",
        "endTime": "sunset",
        "startOffset": 0,
        "endOffset": "00:30:00",
        "x": 370,
        "y": 120,
        "wires": [
            [
                "2335f8d6.37b8a8"
            ],
            []
        ]
    },
    {
        "id": "7e652dbf.3b6764",
        "type": "time-range-switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "Evening",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunset",
        "endTime": "22:59:59",
        "startOffset": "00:30:01",
        "endOffset": 0,
        "x": 380,
        "y": 180,
        "wires": [
            [
                "69efa15c.d09ce"
            ],
            []
        ]
    },
    {
        "id": "713c143e.f6cb4c",
        "type": "time-range-switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "Night",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "23:00",
        "endTime": "sunrise",
        "startOffset": 0,
        "endOffset": 0,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "ced91ce0.58361"
            ],
            []
        ]
    },
    {
        "id": "2cd982b5.072a9e",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Shower Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.bathroom_shower_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 1320,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4f88cd2d.03a384",
        "type": "trigger",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "10",
        "extend": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 390,
        "y": 360,
        "wires": [
            [
                "3678a122.3f5c1e",
                "5189f5c3.1cf25c"
            ]
        ]
    },
    {
        "id": "2335f8d6.37b8a8",
        "type": "change",
        "z": "3a5af8d2.8b1fa8",
        "name": "100%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "255",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 120,
        "wires": [
            [
                "c95c9b6f.bf1e98",
                "36057b0.2cfb286"
            ]
        ]
    },
    {
        "id": "69efa15c.d09ce",
        "type": "change",
        "z": "3a5af8d2.8b1fa8",
        "name": "50%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "128",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 180,
        "wires": [
            [
                "c95c9b6f.bf1e98",
                "36057b0.2cfb286"
            ]
        ]
    },
    {
        "id": "ced91ce0.58361",
        "type": "change",
        "z": "3a5af8d2.8b1fa8",
        "name": "10%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "26",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 240,
        "wires": [
            [
                "c95c9b6f.bf1e98",
                "36057b0.2cfb286"
            ]
        ]
    },
    {
        "id": "22a6a27e.3e7afe",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn Vanity Lights On",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.bathroom_vanity_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 1300,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7cf28482.4a104c",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 935,
        "y": 120,
        "wires": [
            [
                "1898be10.2683f2"
            ],
            [
                "819182e2.009aa"
            ]
        ],
        "l": false
    },
    {
        "id": "1898be10.2683f2",
        "type": "template",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"data\": {\n        \"brightness\": {{topic}}\n    }\n}",
        "output": "json",
        "x": 1075,
        "y": 120,
        "wires": [
            [
                "22a6a27e.3e7afe"
            ]
        ],
        "l": false
    },
    {
        "id": "819182e2.009aa",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "data.attributes.brightness",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "topic",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 995,
        "y": 160,
        "wires": [
            [
                "1898be10.2683f2"
            ]
        ],
        "l": false
    },
    {
        "id": "562ffbcf.23bab4",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Set Brightness level, depending on time of day",
        "info": "",
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "6f12df91.bf1f7",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Get Bathroom light dimmers",
        "info": "",
        "x": 820,
        "y": 80,
        "wires": []
    },
    {
        "id": "a1a3d834.5236e8",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn them on if they are \"Off\"",
        "info": "If they are \"Off\", or their Brightness level is lower than the target Brightness, \nset them on and to target Brightness",
        "x": 1320,
        "y": 80,
        "wires": []
    },
    {
        "id": "17e89245.8f38ee",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Or their Brightness level is lower than the target Brightness",
        "info": "",
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "ef612feb.5f04e",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Vanity Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.bathroom_vanity_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 1320,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d56c542e.a2d5f8",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1095,
        "y": 360,
        "wires": [
            [
                "2cd982b5.072a9e",
                "ef612feb.5f04e",
                "d53d1e26b4a7c12f"
            ],
            [
                "1abb1a23.e56616",
                "004bb837ee4cf44a"
            ]
        ],
        "l": false
    },
    {
        "id": "2bb641f8.f472ce",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn lights off after 10 minutes, unless humidity is 5% or more than the average",
        "info": "",
        "x": 600,
        "y": 320,
        "wires": []
    },
    {
        "id": "d672e095.56ebc",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "If humidity is 5% or more than average, measure every minute",
        "info": "",
        "x": 840,
        "y": 500,
        "wires": []
    },
    {
        "id": "66406a3d.ba27d4",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "and turn off when it is below average + 5%",
        "info": "",
        "x": 780,
        "y": 540,
        "wires": []
    },
    {
        "id": "3678a122.3f5c1e",
        "type": "change",
        "z": "3a5af8d2.8b1fa8",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 555,
        "y": 440,
        "wires": [
            [
                "1abb1a23.e56616"
            ]
        ],
        "l": false
    },
    {
        "id": "1abb1a23.e56616",
        "type": "delay",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 680,
        "y": 440,
        "wires": [
            [
                "5189f5c3.1cf25c"
            ]
        ]
    },
    {
        "id": "5189f5c3.1cf25c",
        "type": "ha-get-entities",
        "z": "3a5af8d2.8b1fa8",
        "name": "Get Current and Avg Humidity",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "includes",
                "value": "sensor.bathroom_sensor_humidity,sensor.average_bathroom_humidity",
                "valueType": "str"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 690,
        "y": 360,
        "wires": [
            [
                "1260aea.2c14451"
            ]
        ]
    },
    {
        "id": "1260aea.2c14451",
        "type": "function",
        "z": "3a5af8d2.8b1fa8",
        "name": "Is shower on?",
        "func": "var shower_state = \"off\";\nvar average_humidity = 0.0;\nvar current_humidity = 0.0;\n\nfor (var i=0; i< msg.payload.length; i++) {\n    entity_id = msg.payload[i].entity_id;\n    \n    match = entity_id.match(/^sensor.average.*/);\n    if (match) {\n        average_humidity = parseFloat(msg.payload[i].state);\n    }\n    else {\n        current_humidity = parseFloat(msg.payload[i].state);\n    }\n}\n\nif (current_humidity >= (average_humidity + 5.0)) {\n    shower_state = \"on\"\n}\n\nmsg.payload = shower_state;\nmsg.data = {\n    current_humidity: current_humidity,\n    average_humidity: average_humidity\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 940,
        "y": 360,
        "wires": [
            [
                "d56c542e.a2d5f8"
            ]
        ]
    },
    {
        "id": "36057b0.2cfb286",
        "type": "api-current-state",
        "z": "3a5af8d2.8b1fa8",
        "name": "Shower Lights",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "light.bathroom_shower_lights",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "570441df.4f97f"
            ]
        ]
    },
    {
        "id": "c95c9b6f.bf1e98",
        "type": "api-current-state",
        "z": "3a5af8d2.8b1fa8",
        "name": "Vanity Lights",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "light.bathroom_vanity_lights",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "7cf28482.4a104c"
            ]
        ]
    },
    {
        "id": "570441df.4f97f",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 935,
        "y": 240,
        "wires": [
            [
                "1d0d1fea.dfb14"
            ],
            [
                "2c0844cc.d677ac"
            ]
        ],
        "l": false
    },
    {
        "id": "1d0d1fea.dfb14",
        "type": "template",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"data\": {\n        \"brightness\": {{topic}}\n    }\n}",
        "output": "json",
        "x": 1075,
        "y": 240,
        "wires": [
            [
                "e92b6399.30d2"
            ]
        ],
        "l": false
    },
    {
        "id": "2c0844cc.d677ac",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "data.attributes.brightness",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "topic",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 995,
        "y": 280,
        "wires": [
            [
                "1d0d1fea.dfb14"
            ]
        ],
        "l": false
    },
    {
        "id": "e92b6399.30d2",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn Shower Light On",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.bathroom_shower_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 1300,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1eece7b3.31df28",
        "type": "trigger-state",
        "z": "3a5af8d2.8b1fa8",
        "name": "Guest Bathroom Sensor",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.guest_bathroom_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 150,
        "y": 920,
        "wires": [
            [
                "6b9edc33.e4a074",
                "aba3abbd.f7b188",
                "6ce2795a.51fb48",
                "8fc4fbbf.704978"
            ],
            []
        ]
    },
    {
        "id": "6b9edc33.e4a074",
        "type": "time-range-switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "Day",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunrise",
        "endTime": "sunset",
        "startOffset": 0,
        "endOffset": "00:30:00",
        "x": 410,
        "y": 980,
        "wires": [
            [
                "6898bdb8.8ccc14"
            ],
            []
        ]
    },
    {
        "id": "aba3abbd.f7b188",
        "type": "time-range-switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "Evening",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "sunset",
        "endTime": "22:59:59",
        "startOffset": "00:30:01",
        "endOffset": 0,
        "x": 420,
        "y": 1040,
        "wires": [
            [
                "d381b869.e799e8"
            ],
            []
        ]
    },
    {
        "id": "6ce2795a.51fb48",
        "type": "time-range-switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "Night",
        "lat": "38.873568",
        "lon": "-77.118037",
        "startTime": "23:00",
        "endTime": "sunrise",
        "startOffset": 0,
        "endOffset": 0,
        "x": 410,
        "y": 1100,
        "wires": [
            [
                "12980953.f00a57"
            ],
            []
        ]
    },
    {
        "id": "8fc4fbbf.704978",
        "type": "trigger",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "10",
        "extend": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 430,
        "y": 1220,
        "wires": [
            [
                "1eac4799.13dd28"
            ]
        ]
    },
    {
        "id": "6898bdb8.8ccc14",
        "type": "change",
        "z": "3a5af8d2.8b1fa8",
        "name": "100%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "255",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 980,
        "wires": [
            [
                "f48f8132.c12fa"
            ]
        ]
    },
    {
        "id": "d381b869.e799e8",
        "type": "change",
        "z": "3a5af8d2.8b1fa8",
        "name": "50%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "128",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1040,
        "wires": [
            [
                "f48f8132.c12fa"
            ]
        ]
    },
    {
        "id": "12980953.f00a57",
        "type": "change",
        "z": "3a5af8d2.8b1fa8",
        "name": "10%",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "26",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 1100,
        "wires": [
            [
                "f48f8132.c12fa"
            ]
        ]
    },
    {
        "id": "a38720c5.9a5bc",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn on Sink Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.guest_bathroom_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 1330,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "2858b933.673746",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 975,
        "y": 980,
        "wires": [
            [
                "e28936d2.cb4c48"
            ],
            [
                "90ec82b4.e9e38"
            ]
        ],
        "l": false
    },
    {
        "id": "e28936d2.cb4c48",
        "type": "template",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"data\": {\n        \"brightness\": {{topic}}\n    }\n}",
        "output": "json",
        "x": 1115,
        "y": 980,
        "wires": [
            [
                "a38720c5.9a5bc"
            ]
        ],
        "l": false
    },
    {
        "id": "90ec82b4.e9e38",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "data.attributes.brightness",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "topic",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1035,
        "y": 1020,
        "wires": [
            [
                "e28936d2.cb4c48"
            ]
        ],
        "l": false
    },
    {
        "id": "8610c3e9.648c7",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Set Brightness level, depending on time of day",
        "info": "",
        "x": 540,
        "y": 940,
        "wires": []
    },
    {
        "id": "1a2342f.bb5a1bd",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Get Bathroom light dimmer",
        "info": "",
        "x": 850,
        "y": 940,
        "wires": []
    },
    {
        "id": "7cd185f7.49924c",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn it on if it is \"Off\"",
        "info": "If they are \"Off\", or their Brightness level is lower than the target Brightness, \nset them on and to target Brightness",
        "x": 1330,
        "y": 940,
        "wires": []
    },
    {
        "id": "1eac4799.13dd28",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Sink Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.guest_bathroom_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 650,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "57e94e50.128b6",
        "type": "comment",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn lights off after 10 minutes",
        "info": "",
        "x": 480,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f48f8132.c12fa",
        "type": "api-current-state",
        "z": "3a5af8d2.8b1fa8",
        "name": "Sink Lights",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "light.guest_bathroom_lights",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 810,
        "y": 980,
        "wires": [
            [
                "2858b933.673746"
            ]
        ]
    },
    {
        "id": "19b61006.fdf77",
        "type": "inject",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1160,
        "wires": [
            [
                "12980953.f00a57"
            ]
        ]
    },
    {
        "id": "8700b80e.0b0b68",
        "type": "trigger-state",
        "z": "3a5af8d2.8b1fa8",
        "name": "Half Bath Motion",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.half_bath_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on",
                "propertyValue": "new_state.state"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 120,
        "y": 1380,
        "wires": [
            [
                "805ab527.d6528",
                "4b6d87e4.43445",
                "4b131fd309be2e65",
                "44f8a64b1f2bfe7c"
            ],
            []
        ]
    },
    {
        "id": "b160a6cc.ade7f8",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Half Bath Fan",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.half_bath_fan"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_off",
        "x": 620,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "805ab527.d6528",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn on Half Bath Fan",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.half_bath_fan"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_on",
        "x": 420,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "4b6d87e4.43445",
        "type": "trigger",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "15",
        "extend": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 1500,
        "wires": [
            [
                "b160a6cc.ade7f8"
            ]
        ]
    },
    {
        "id": "b02940d09aba2c8f",
        "type": "trigger-state",
        "z": "3a5af8d2.8b1fa8",
        "name": "Hall Bathroom Motion",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.hall_bath_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "92a385264bcbd92e",
                "2411bb4551819e52",
                "b2212135ec2229a2",
                "223e45fb4c33ad94"
            ],
            []
        ]
    },
    {
        "id": "be4138cc0f3401bc",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Hall Bathroom Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.hall_bath_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 730,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "b2212135ec2229a2",
        "type": "trigger",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "10",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 1800,
        "wires": [
            [
                "be4138cc0f3401bc"
            ]
        ]
    },
    {
        "id": "92a385264bcbd92e",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn on Hall Bathroom Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.hall_bath_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 500,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "912f5f76cc6c75d9",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Hall Bathroom Fan",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.hall_bath_fan"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_off",
        "x": 730,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "2411bb4551819e52",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn on Hall Bathroom Fan",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.hall_bath_fan"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_on",
        "x": 500,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "223e45fb4c33ad94",
        "type": "trigger",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "15",
        "extend": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 1860,
        "wires": [
            [
                "912f5f76cc6c75d9"
            ]
        ]
    },
    {
        "id": "d53d1e26b4a7c12f",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Fan",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.bathroom_fan"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_off",
        "x": 1290,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "004bb837ee4cf44a",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn on Fan",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.bathroom_fan"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_on",
        "x": 1290,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "faec5ca0af0fa03f",
        "type": "server-state-changed",
        "z": "3a5af8d2.8b1fa8",
        "name": "Shower Lights Off",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "light.bathroom_shower_lights"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 130,
        "y": 460,
        "wires": [
            [
                "73e9bb5785e79268"
            ],
            []
        ]
    },
    {
        "id": "85e771d8977f9c6a",
        "type": "server-state-changed",
        "z": "3a5af8d2.8b1fa8",
        "name": "Vanity Lights Off",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "light.bathroom_vanity_lights"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 120,
        "y": 520,
        "wires": [
            [
                "73e9bb5785e79268"
            ],
            []
        ]
    },
    {
        "id": "d5410a35641d6a28",
        "type": "server-state-changed",
        "z": "3a5af8d2.8b1fa8",
        "name": "Bathroom Fan Off",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "switch.bathroom_fan"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 130,
        "y": 580,
        "wires": [
            [
                "73e9bb5785e79268"
            ],
            []
        ]
    },
    {
        "id": "73e9bb5785e79268",
        "type": "ha-get-entities",
        "z": "3a5af8d2.8b1fa8",
        "name": "Check Bathroom Lights",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "includes",
                "value": "light.bathroom_shower_lights, light.bathroom_vanity_lights, switch.bathroom_fan",
                "valueType": "str"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 390,
        "y": 520,
        "wires": [
            [
                "b71f3faea6ae0b7e"
            ]
        ]
    },
    {
        "id": "b71f3faea6ae0b7e",
        "type": "function",
        "z": "3a5af8d2.8b1fa8",
        "name": "Are all lights off?",
        "func": "let light_count = msg.payload.length\n\nlet lights_off_count = msg.payload.filter(light => light.state === 'off').length\n\nmsg.payload = light_count == lights_off_count\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 580,
        "wires": [
            [
                "464eeec9761d0b4e"
            ]
        ]
    },
    {
        "id": "464eeec9761d0b4e",
        "type": "switch",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 515,
        "y": 580,
        "wires": [
            [
                "3678a122.3f5c1e"
            ]
        ],
        "l": false
    },
    {
        "id": "ccf07c9b616b8be5",
        "type": "subflow:c7fc795b4b70c91a",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "03b6aadc0c045ded",
                "b48d015ec64a1485"
            ]
        ]
    },
    {
        "id": "03b6aadc0c045ded",
        "type": "template",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "field": "__config",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"startTime\": \"{{payload}}\"\n}",
        "output": "json",
        "x": 265,
        "y": 120,
        "wires": [
            [
                "149155e3.ad0d0a"
            ]
        ],
        "l": false
    },
    {
        "id": "b48d015ec64a1485",
        "type": "template",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "field": "__config",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"endTime\": \"{{payload}}\"\n}",
        "output": "json",
        "x": 265,
        "y": 240,
        "wires": [
            [
                "713c143e.f6cb4c"
            ]
        ],
        "l": false
    },
    {
        "id": "4b131fd309be2e65",
        "type": "trigger",
        "z": "3a5af8d2.8b1fa8",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 1440,
        "wires": [
            [
                "5dae82da7742f582"
            ]
        ]
    },
    {
        "id": "5dae82da7742f582",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn off Half Bath Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.half_bath_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 630,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "44f8a64b1f2bfe7c",
        "type": "api-call-service",
        "z": "3a5af8d2.8b1fa8",
        "name": "Turn on Half Bath Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [
            "aaa3b1b86531cbcd500859a06adbd18d"
        ],
        "entityId": [],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 430,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "40ca76e9.74be88",
        "type": "trigger",
        "z": "34229498.d69b1c",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 160,
        "wires": [
            [
                "8ace7760.1b2948"
            ]
        ]
    },
    {
        "id": "8ace7760.1b2948",
        "type": "ha-get-entities",
        "z": "34229498.d69b1c",
        "name": "Get all Outdoor Lights",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.hue_outdoor",
                "valueType": "str"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 620,
        "y": 160,
        "wires": [
            [
                "3956c7b1.42af08"
            ]
        ]
    },
    {
        "id": "3956c7b1.42af08",
        "type": "function",
        "z": "34229498.d69b1c",
        "name": "Are all lights on?",
        "func": "let light_count = msg.payload.length\n\nlet lights_on_count = msg.payload.filter(light => light.state === 'on').length\n\nif (light_count == lights_on_count)\n    msg.reset= true\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 160,
        "wires": [
            [
                "df204e72.8a265"
            ]
        ]
    },
    {
        "id": "df204e72.8a265",
        "type": "switch",
        "z": "34229498.d69b1c",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 995,
        "y": 160,
        "wires": [
            [
                "62c82585.0ed2dc"
            ],
            [
                "b0db018c.3a32c"
            ]
        ],
        "outputLabels": [
            "Reset message is not set",
            "Reset message is set"
        ],
        "l": false
    },
    {
        "id": "809a6781.1fbd58",
        "type": "split",
        "z": "34229498.d69b1c",
        "name": "for every light...",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1420,
        "y": 160,
        "wires": [
            [
                "8e7a11d3.935c"
            ]
        ]
    },
    {
        "id": "b0db018c.3a32c",
        "type": "link out",
        "z": "34229498.d69b1c",
        "name": "Send Reset",
        "links": [
            "f59aa761.f521b8"
        ],
        "x": 1130,
        "y": 200,
        "wires": [],
        "l": true
    },
    {
        "id": "f59aa761.f521b8",
        "type": "link in",
        "z": "34229498.d69b1c",
        "name": "",
        "links": [
            "b0db018c.3a32c"
        ],
        "x": 135,
        "y": 120,
        "wires": [
            [
                "40ca76e9.74be88"
            ]
        ]
    },
    {
        "id": "614e0a4b.f15a44",
        "type": "schedex",
        "z": "34229498.d69b1c",
        "d": true,
        "name": "Sunset",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "",
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 160,
        "wires": [
            [
                "40ca76e9.74be88"
            ]
        ]
    },
    {
        "id": "8e7a11d3.935c",
        "type": "api-call-service",
        "z": "34229498.d69b1c",
        "name": "Turn on Outdoor Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{payload.entity_id}}"
        ],
        "labelId": [],
        "data": "{\"brightness\":255,\"color_temp\":440}",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 1660,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e2c19011.b17e7",
        "type": "trigger",
        "z": "34229498.d69b1c",
        "d": true,
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 380,
        "wires": [
            [
                "48d990ba.8ee0c"
            ]
        ]
    },
    {
        "id": "48d990ba.8ee0c",
        "type": "ha-get-entities",
        "z": "34229498.d69b1c",
        "name": "Get all Outdoor Lights",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "light.hue_outdoor",
                "valueType": "str"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 620,
        "y": 380,
        "wires": [
            [
                "35721cc6.fcaeb4"
            ]
        ]
    },
    {
        "id": "35721cc6.fcaeb4",
        "type": "function",
        "z": "34229498.d69b1c",
        "name": "Are all lights off?",
        "func": "let light_count = msg.payload.length\n\nlet lights_off_count = msg.payload.filter(light => light.state === 'off').length\n\nif (light_count == lights_off_count)\n    msg.reset= true\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 380,
        "wires": [
            [
                "484caa24.c94ea4"
            ]
        ]
    },
    {
        "id": "484caa24.c94ea4",
        "type": "switch",
        "z": "34229498.d69b1c",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 995,
        "y": 380,
        "wires": [
            [
                "8ad66456.d5a11"
            ],
            [
                "a77853f.dd270b"
            ]
        ],
        "outputLabels": [
            "Reset message is not set",
            "Reset message is set"
        ],
        "l": false
    },
    {
        "id": "8ad66456.d5a11",
        "type": "split",
        "z": "34229498.d69b1c",
        "name": "for every light...",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1140,
        "y": 380,
        "wires": [
            [
                "14409d7e.f9f183"
            ]
        ]
    },
    {
        "id": "a77853f.dd270b",
        "type": "link out",
        "z": "34229498.d69b1c",
        "name": "Send Reset",
        "links": [
            "6c0e2d87.512a3c"
        ],
        "x": 1130,
        "y": 420,
        "wires": [],
        "l": true
    },
    {
        "id": "6c0e2d87.512a3c",
        "type": "link in",
        "z": "34229498.d69b1c",
        "name": "",
        "links": [
            "a77853f.dd270b",
            "60911499.e1b28c"
        ],
        "x": 135,
        "y": 340,
        "wires": [
            [
                "e2c19011.b17e7"
            ]
        ]
    },
    {
        "id": "356db32.29813cc",
        "type": "schedex",
        "z": "34229498.d69b1c",
        "d": true,
        "name": "Midnight",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "",
        "ontopic": "",
        "onpayload": "",
        "onoffset": "",
        "onrandomoffset": 0,
        "offtime": "00:00",
        "offtopic": "off",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 380,
        "wires": [
            [
                "e2c19011.b17e7"
            ]
        ]
    },
    {
        "id": "14409d7e.f9f183",
        "type": "api-call-service",
        "z": "34229498.d69b1c",
        "name": "Turn off Outdoor Lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{payload.entity_id}}"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 1360,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "a15eb5a1.a4af78",
        "type": "server-state-changed",
        "z": "34229498.d69b1c",
        "name": "Living Room",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "light.living_room_lights"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 110,
        "y": 560,
        "wires": [
            [
                "20965e42.877b92"
            ]
        ]
    },
    {
        "id": "d4a395cb.b5ea58",
        "type": "server-state-changed",
        "z": "34229498.d69b1c",
        "name": "Casual Dining",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "light.casual_dining_lights"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 110,
        "y": 680,
        "wires": [
            [
                "20965e42.877b92"
            ]
        ]
    },
    {
        "id": "bda5db80.f75c68",
        "type": "server-state-changed",
        "z": "34229498.d69b1c",
        "name": "Kitchen Overhead",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "light.kitchen_overhead_lights"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 130,
        "y": 620,
        "wires": [
            [
                "20965e42.877b92"
            ]
        ]
    },
    {
        "id": "a0aebf93.b0dc2",
        "type": "server-state-changed",
        "z": "34229498.d69b1c",
        "name": "Upstairs",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 1,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "light.upstairs_lights"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": false,
        "stateType": "str",
        "ifState": "",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "eventData"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "",
                "valueType": "triggerId"
            }
        ],
        "x": 100,
        "y": 740,
        "wires": [
            [
                "20965e42.877b92"
            ]
        ]
    },
    {
        "id": "20965e42.877b92",
        "type": "time-range-switch",
        "z": "34229498.d69b1c",
        "name": "Bedtime",
        "lat": "",
        "lon": "",
        "startTime": "22:00",
        "endTime": "00:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 380,
        "y": 640,
        "wires": [
            [
                "172a07e2.e970d8"
            ],
            []
        ]
    },
    {
        "id": "172a07e2.e970d8",
        "type": "ha-get-entities",
        "z": "34229498.d69b1c",
        "name": "Check downstairs lights",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "includes",
                "value": "light.living_room_lights, light.kitchen_overhead_lights, light.casual_dining_lights, light.upstairs_lights",
                "valueType": "str"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 650,
        "y": 640,
        "wires": [
            [
                "c9e2988f.929f78"
            ]
        ]
    },
    {
        "id": "c9e2988f.929f78",
        "type": "function",
        "z": "34229498.d69b1c",
        "name": "Are all lights off?",
        "func": "let light_count = msg.payload.length\n\nlet lights_off_count = msg.payload.filter(light => light.state === 'off').length\n\nmsg.payload = light_count == lights_off_count\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 640,
        "wires": [
            [
                "578c6b8.fadd494"
            ]
        ]
    },
    {
        "id": "dfeb1e7.7bb9ce",
        "type": "trigger",
        "z": "34229498.d69b1c",
        "name": "Wait 5 minutes",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "str",
        "duration": "5",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1240,
        "y": 640,
        "wires": [
            [
                "60911499.e1b28c"
            ]
        ]
    },
    {
        "id": "578c6b8.fadd494",
        "type": "switch",
        "z": "34229498.d69b1c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1075,
        "y": 640,
        "wires": [
            [
                "dfeb1e7.7bb9ce"
            ],
            [
                "ca3e52b2.34f4"
            ]
        ],
        "l": false
    },
    {
        "id": "ca3e52b2.34f4",
        "type": "change",
        "z": "34229498.d69b1c",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 700,
        "wires": [
            [
                "dfeb1e7.7bb9ce"
            ]
        ]
    },
    {
        "id": "60911499.e1b28c",
        "type": "link out",
        "z": "34229498.d69b1c",
        "name": "",
        "links": [
            "6c0e2d87.512a3c"
        ],
        "x": 1375,
        "y": 640,
        "wires": []
    },
    {
        "id": "5fdaf8cf.324d18",
        "type": "comment",
        "z": "34229498.d69b1c",
        "name": "Send the \"turn_off\" message every minute until all lights are confirmed \"Off\"",
        "info": "",
        "x": 560,
        "y": 340,
        "wires": []
    },
    {
        "id": "7292c913.ef3a08",
        "type": "comment",
        "z": "34229498.d69b1c",
        "name": "Send the \"turn_on\" message every minute until all lights are confirmed \"On\"",
        "info": "",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "d0389337.dd438",
        "type": "api-call-service",
        "z": "34229498.d69b1c",
        "name": "June - Set Rainbow",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "hue.hue_activate_scene",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "{\t   \"group_name\":\"Backyard\",\t   \"scene_name\":\"Rainbow\"\t}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "hue",
        "service": "hue_activate_scene",
        "x": 1430,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "62c82585.0ed2dc",
        "type": "function",
        "z": "34229498.d69b1c",
        "name": "Is it June?",
        "func": "let today = new Date()\nlet month = today.getMonth() + 1\n\nif (month === 6) {\n    msg.theme = 'pride'\n} else if (month === 12) {\n    msg.theme = 'christmas'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 160,
        "wires": [
            [
                "d2fe65.5728d198"
            ]
        ]
    },
    {
        "id": "d2fe65.5728d198",
        "type": "switch",
        "z": "34229498.d69b1c",
        "name": "",
        "property": "theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "pride",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "christmas",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1255,
        "y": 160,
        "wires": [
            [
                "809a6781.1fbd58"
            ],
            [
                "d0389337.dd438"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "7af88e63.2acd8",
        "type": "inject",
        "z": "34229498.d69b1c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 420,
        "y": 200,
        "wires": [
            [
                "8ace7760.1b2948"
            ]
        ]
    },
    {
        "id": "0bc6f4933e428efc",
        "type": "inject",
        "z": "34229498.d69b1c",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 950,
        "y": 220,
        "wires": [
            [
                "b0db018c.3a32c"
            ]
        ]
    },
    {
        "id": "b052b47e518ba69c",
        "type": "inject",
        "z": "34229498.d69b1c",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "e2c19011.b17e7"
            ]
        ]
    },
    {
        "id": "b49148dd34945c34",
        "type": "api-call-service",
        "z": "34229498.d69b1c",
        "name": "June - Set Rainbow",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "hue.hue_activate_scene",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "{\t   \"group_name\":\"Backyard\",\t   \"scene_name\":\"Rainbow\"\t}",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "hue",
        "service": "hue_activate_scene",
        "x": 1430,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "1fc05ee8.b67ef1",
        "type": "schedex",
        "z": "87b2ba05.05d808",
        "name": "Evening",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "21:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 140,
        "y": 280,
        "wires": [
            [
                "9395208e.f15da"
            ]
        ]
    },
    {
        "id": "db743a3b.ca6478",
        "type": "api-call-service",
        "z": "87b2ba05.05d808",
        "name": "Lock Front Door",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "lock.lock",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "lock.front_door"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "lock",
        "service": "lock",
        "x": 1080,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c2b2caf3.b67db8",
        "type": "comment",
        "z": "87b2ba05.05d808",
        "name": "Check locks at 9:00 pm, and lock each if unlocked",
        "info": "",
        "x": 270,
        "y": 240,
        "wires": []
    },
    {
        "id": "7f8d76b8.7808b8",
        "type": "api-call-service",
        "z": "87b2ba05.05d808",
        "name": "Lock Back Door",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "lock.lock",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "lock.back_door"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "lock",
        "service": "lock",
        "x": 1080,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f9539f39.0bb73",
        "type": "link in",
        "z": "87b2ba05.05d808",
        "name": "",
        "links": [
            "22d65218.ae55ee",
            "9395208e.f15da"
        ],
        "x": 635,
        "y": 220,
        "wires": [
            [
                "1a563dfd.6554b2"
            ]
        ]
    },
    {
        "id": "dbb29c1c.765e5",
        "type": "inject",
        "z": "87b2ba05.05d808",
        "name": "Manually lock locks",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "22d65218.ae55ee"
            ]
        ]
    },
    {
        "id": "22d65218.ae55ee",
        "type": "link out",
        "z": "87b2ba05.05d808",
        "name": "",
        "links": [
            "f9539f39.0bb73",
            "e1619add.5fec28"
        ],
        "x": 315,
        "y": 360,
        "wires": []
    },
    {
        "id": "1a563dfd.6554b2",
        "type": "api-current-state",
        "z": "87b2ba05.05d808",
        "name": "Check Back Door Closed",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "binary_sensor.back_door_sensor_window_door_is_open",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 810,
        "y": 220,
        "wires": [
            [
                "7f8d76b8.7808b8"
            ],
            []
        ]
    },
    {
        "id": "969870a9.100c1",
        "type": "api-current-state",
        "z": "87b2ba05.05d808",
        "name": "Check Front Door Closed",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "binary_sensor.front_door_sensor_window_door_is_open",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 810,
        "y": 160,
        "wires": [
            [
                "db743a3b.ca6478"
            ],
            []
        ]
    },
    {
        "id": "feb87b50.8aff58",
        "type": "trigger-state",
        "z": "87b2ba05.05d808",
        "name": "Front Door closed",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.front_door_sensor_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 170,
        "y": 160,
        "wires": [
            [
                "5b432fb7.8236b"
            ],
            []
        ]
    },
    {
        "id": "5b432fb7.8236b",
        "type": "api-current-state",
        "z": "87b2ba05.05d808",
        "name": "Autolock?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.front_door_autolock",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "b2ec238e.4d6e9"
            ],
            []
        ]
    },
    {
        "id": "b2ec238e.4d6e9",
        "type": "trigger",
        "z": "87b2ba05.05d808",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "5",
        "extend": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 495,
        "y": 160,
        "wires": [
            [
                "3e288d30.d88722"
            ]
        ],
        "l": false
    },
    {
        "id": "3542ff64.72a5b",
        "type": "comment",
        "z": "87b2ba05.05d808",
        "name": "Lock Doors after checking door is closed",
        "info": "",
        "x": 780,
        "y": 120,
        "wires": []
    },
    {
        "id": "e1619add.5fec28",
        "type": "link in",
        "z": "87b2ba05.05d808",
        "name": "",
        "links": [
            "3e288d30.d88722",
            "9395208e.f15da",
            "22d65218.ae55ee"
        ],
        "x": 635,
        "y": 160,
        "wires": [
            [
                "969870a9.100c1"
            ]
        ]
    },
    {
        "id": "9395208e.f15da",
        "type": "link out",
        "z": "87b2ba05.05d808",
        "name": "",
        "links": [
            "e1619add.5fec28",
            "f9539f39.0bb73"
        ],
        "x": 255,
        "y": 280,
        "wires": []
    },
    {
        "id": "3e288d30.d88722",
        "type": "link out",
        "z": "87b2ba05.05d808",
        "name": "",
        "links": [
            "e1619add.5fec28"
        ],
        "x": 555,
        "y": 160,
        "wires": []
    },
    {
        "id": "aaefd5132a13348b",
        "type": "inject",
        "z": "87b2ba05.05d808",
        "name": "Reset",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "b2ec238e.4d6e9"
            ]
        ]
    },
    {
        "id": "208497fb.f65228",
        "type": "mqtt in",
        "z": "67bb867f.1e3018",
        "name": "",
        "topic": "presence/cliff",
        "qos": "2",
        "datatype": "auto",
        "broker": "d6b350e1.1151a",
        "inputs": 0,
        "x": 110,
        "y": 120,
        "wires": [
            [
                "2511c09f.28c99"
            ]
        ]
    },
    {
        "id": "4ab38fc2.4d442",
        "type": "mqtt in",
        "z": "67bb867f.1e3018",
        "name": "",
        "topic": "presence/alison",
        "qos": "2",
        "datatype": "auto",
        "broker": "d6b350e1.1151a",
        "inputs": 0,
        "x": 120,
        "y": 200,
        "wires": [
            [
                "2511c09f.28c99"
            ]
        ]
    },
    {
        "id": "2511c09f.28c99",
        "type": "function",
        "z": "67bb867f.1e3018",
        "name": "Compose HA Presence Data",
        "func": "// boolean stored as string\nconst state = msg.payload === \"true\" ? \"home\" : \"away\";\n\n// topic is \"presence/person\", isolate just the person part\nconst person = (msg.topic.split(\"/\"))[1];\n\n// friendly name should have Initial cap\nconst friendly_name = person.charAt(0).toUpperCase() + person.slice(1)\n\n// path of entity in Home Assistant\nconst path = \"/api/states/person.\" + person;\n\n// picture of person. add \"_bw\", if person is away\nconst entity_picture = \"/local/images/\" + person + (state == \"home\" ? \"\" : \"_bw\") + \".jpg\";\n\nreturn {\n    topic: person,\n    payload: {\n        \"path\": path,\n        \"data\": {\n            \"state\": state,\n            \"attributes\": {\n                \"friendly_name\": friendly_name,\n                \"entity_picture\": entity_picture\n            }\n        }\n    }\n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "e8a9f70e.2e7518"
            ]
        ]
    },
    {
        "id": "e8a9f70e.2e7518",
        "type": "ha-api",
        "z": "67bb867f.1e3018",
        "name": "Set HA Presence",
        "server": "2e075c78.e96774",
        "version": 1,
        "debugenabled": false,
        "protocol": "http",
        "method": "post",
        "path": "",
        "data": "",
        "dataType": "json",
        "responseType": "json",
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "results"
            }
        ],
        "x": 690,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "df549025.fa2e1",
        "type": "comment",
        "z": "67bb867f.1e3018",
        "name": "Set presence status for Home Assistant",
        "info": "",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "cd44d0ef79d62b15",
        "type": "ical-upcoming",
        "z": "67bb867f.1e3018",
        "confignode": "f0573a7dfdc9f809",
        "timeout": "1",
        "timeoutUnits": "hours",
        "cron": "",
        "name": "Get Cameron Calendar entries",
        "offsettype": "",
        "offset": "",
        "offsetUnitstype": "",
        "offsetUnits": "",
        "eventtypes": "events",
        "eventtypestype": "eventtypes",
        "calendar": "",
        "calendartype": "str",
        "triggertype": "trigger",
        "trigger": "match",
        "timezone": "",
        "timezonetype": "str",
        "dateformat": "{ \"timeStyle\": \"short\", \"dateStyle\": \"short\" }",
        "dateformattype": "json",
        "language": "en",
        "languagetype": "language",
        "filterProperty": "summary",
        "filterPropertytype": "filterProperty",
        "filterOperator": "between",
        "filterOperatortype": "filterOperator",
        "filtertype": "str",
        "filter2type": "str",
        "filter2": "",
        "filter": "Cameron",
        "checkall": false,
        "endpreview": "",
        "endpreviewUnits": "",
        "previewtype": "num",
        "preview": "2",
        "previewUnitstype": "previewUnits",
        "previewUnits": "days",
        "pastviewtype": "num",
        "pastview": "0",
        "pastviewUnits": "days",
        "pastviewUnitstype": "pastviewUnits",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "9e79362890575ad4"
            ]
        ]
    },
    {
        "id": "dba397ae0db56665",
        "type": "api-call-service",
        "z": "67bb867f.1e3018",
        "name": "Set Cameron not here",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.cameron_mode"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "turn_off",
        "x": 620,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "e3d67aa4864ad6b5",
        "type": "api-call-service",
        "z": "67bb867f.1e3018",
        "name": "Set Cameron here",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.cameron_mode"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 610,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "598d4b8e773b6b3f",
        "type": "comment",
        "z": "67bb867f.1e3018",
        "name": "Set Cameron visiting based on iCal entries",
        "info": "",
        "x": 200,
        "y": 340,
        "wires": []
    },
    {
        "id": "380c5600.15f6fa",
        "type": "switch",
        "z": "67bb867f.1e3018",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 455,
        "y": 460,
        "wires": [
            [
                "e3d67aa4864ad6b5"
            ],
            [
                "dba397ae0db56665"
            ]
        ],
        "l": false
    },
    {
        "id": "b44f4154894dfa76",
        "type": "comment",
        "z": "67bb867f.1e3018",
        "name": "iCal App Specific Password",
        "info": "agxm-epui-qeyg-qfjd",
        "x": 150,
        "y": 520,
        "wires": []
    },
    {
        "id": "9e79362890575ad4",
        "type": "function",
        "z": "67bb867f.1e3018",
        "name": "Are there Cameron Events in Calendar?",
        "func": "const d = new Date();\nd.setHours(0, 0, 0, 0);\nconst todayDateStr = d.toISOString();\n\nconst found = msg.payload.filter(e => e.eventStart.toISOString() === todayDateStr);\n\n// are there two or more events, meaning sleepover?\nmsg.payload = (msg.payload.length >= 2 && found.length > 0);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 460,
        "wires": [
            [
                "380c5600.15f6fa"
            ]
        ]
    },
    {
        "id": "9d0a0b5e1902e8f4",
        "type": "inject",
        "z": "67bb867f.1e3018",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"date\":\"9/9/22, 12:00 AM – 9/10/22, 12:00 AM\",\"eventStart\":\"2022-09-09T04:00:00.000Z\",\"eventEnd\":\"2022-09-10T04:00:00.000Z\",\"summary\":\"Cameron\",\"duration\":\"P1D\",\"durationSeconds\":86400,\"uid\":{\"uid\":\"9EFBC06C-2076-4E9B-9377-0723E9C5FDC6\",\"date\":\"1665288000000\"},\"isRecurring\":true,\"datetype\":\"date\",\"allDay\":true,\"calendarName\":\"\",\"originalEvent\":{\"component\":[\"vevent\",[[\"created\",{},\"date-time\",\"2021-11-01T16:28:10Z\"],[\"dtend\",{},\"date\",\"2021-07-17\"],[\"dtstamp\",{},\"date-time\",\"2022-09-09T15:13:07Z\"],[\"dtstart\",{},\"date\",\"2021-07-16\"],[\"last-modified\",{},\"date-time\",\"2022-09-09T15:12:35Z\"],[\"rrule\",{},\"recur\",{\"freq\":\"WEEKLY\",\"wkst\":1,\"interval\":2,\"byday\":\"FR\"}],[\"sequence\",{},\"integer\",0],[\"status\",{},\"text\",\"CONFIRMED\"],[\"summary\",{},\"text\",\"Cameron\"],[\"uid\",{},\"text\",\"9EFBC06C-2076-4E9B-9377-0723E9C5FDC6\"],[\"transp\",{},\"text\",\"OPAQUE\"]],[[\"valarm\",[[\"acknowledged\",{},\"unknown\",\"20220909T151235Z\"],[\"action\",{},\"text\",\"DISPLAY\"],[\"description\",{},\"text\",\"This is an event reminder\"],[\"trigger\",{},\"duration\",\"-PT10M\"],[\"uid\",{},\"text\",\"03898E66-78BF-4CF1-9072-EEC22CEDE876\"],[\"x-wr-alarmuid\",{},\"unknown\",\"03898E66-78BF-4CF1-9072-EEC22CEDE876\"]],[]]]],\"_rangeExceptionCache\":{},\"exceptions\":{},\"rangeExceptions\":[]},\"countdown\":{\"days\":-1,\"hours\":-14,\"minutes\":-31,\"seconds\":-1},\"on\":true},{\"date\":\"9/10/22, 12:00 AM – 9/11/22, 12:00 AM\",\"eventStart\":\"2022-09-10T04:00:00.000Z\",\"eventEnd\":\"2022-09-11T04:00:00.000Z\",\"summary\":\"Cameron\",\"duration\":\"P1D\",\"durationSeconds\":86400,\"uid\":{\"uid\":\"E344BA56-8F4B-42A0-A5F6-228567ADFDBA\",\"date\":\"1665374400000\"},\"isRecurring\":true,\"datetype\":\"date\",\"allDay\":true,\"calendarName\":\"\",\"originalEvent\":{\"component\":[\"vevent\",[[\"dtend\",{},\"date\",\"2021-07-18\"],[\"uid\",{},\"text\",\"E344BA56-8F4B-42A0-A5F6-228567ADFDBA\"],[\"dtstamp\",{},\"date-time\",\"2022-09-09T17:16:45Z\"],[\"status\",{},\"text\",\"CONFIRMED\"],[\"sequence\",{},\"integer\",0],[\"summary\",{},\"text\",\"Cameron\"],[\"last-modified\",{},\"date-time\",\"2022-08-13T21:58:25Z\"],[\"dtstart\",{},\"date\",\"2021-07-17\"],[\"created\",{},\"date-time\",\"2021-11-01T16:28:18Z\"],[\"rrule\",{},\"recur\",{\"freq\":\"WEEKLY\",\"wkst\":1,\"interval\":2,\"byday\":\"SA\"}],[\"transp\",{},\"text\",\"OPAQUE\"],[\"x-apple-travel-advisory-behavior\",{},\"unknown\",\"AUTOMATIC\"]],[[\"valarm\",[[\"x-wr-alarmuid\",{},\"unknown\",\"5F949656-2937-4719-914D-0FAE18C687E9\"],[\"uid\",{},\"text\",\"5F949656-2937-4719-914D-0FAE18C687E9\"],[\"trigger\",{},\"duration\",\"-PT15H\"],[\"attach\",{},\"uri\",\"Basso\"],[\"action\",{},\"text\",\"AUDIO\"],[\"x-apple-default-alarm\",{},\"unknown\",\"TRUE\"],[\"acknowledged\",{},\"unknown\",\"20220909T171645Z\"]],[]],[\"valarm\",[[\"x-wr-alarmuid\",{},\"unknown\",\"24B1BCA6-9483-472F-9718-3DEF9E4099F1\"],[\"uid\",{},\"text\",\"24B1BCA6-9483-472F-9718-3DEF9E4099F1\"],[\"description\",{},\"text\",\"This is an event reminder\"],[\"acknowledged\",{},\"unknown\",\"20220909T171645Z\"],[\"trigger\",{},\"duration\",\"-PT10M\"],[\"action\",{},\"text\",\"DISPLAY\"]],[]]]],\"_rangeExceptionCache\":{},\"exceptions\":{},\"rangeExceptions\":[]},\"countdown\":{\"days\":0,\"hours\":10,\"minutes\":29,\"seconds\":59},\"on\":false},{\"date\":\"9/11/22, 12:00 AM – 9/12/22, 12:00 AM\",\"eventStart\":\"2022-09-11T04:00:00.000Z\",\"eventEnd\":\"2022-09-12T04:00:00.000Z\",\"summary\":\"Cameron\",\"duration\":\"P1D\",\"durationSeconds\":86400,\"uid\":{\"uid\":\"E76F54EB-D765-4B87-BBB8-151549FD583A\",\"date\":\"1665460800000\"},\"isRecurring\":true,\"datetype\":\"date\",\"allDay\":true,\"calendarName\":\"\",\"originalEvent\":{\"component\":[\"vevent\",[[\"dtend\",{},\"date\",\"2021-07-19\"],[\"uid\",{},\"text\",\"E76F54EB-D765-4B87-BBB8-151549FD583A\"],[\"dtstamp\",{},\"date-time\",\"2022-08-28T13:24:35Z\"],[\"status\",{},\"text\",\"CONFIRMED\"],[\"sequence\",{},\"integer\",0],[\"summary\",{},\"text\",\"Cameron\"],[\"last-modified\",{},\"date-time\",\"2022-08-14T13:31:42Z\"],[\"dtstart\",{},\"date\",\"2021-07-18\"],[\"created\",{},\"date-time\",\"2021-11-01T16:28:26Z\"],[\"rrule\",{},\"recur\",{\"freq\":\"WEEKLY\",\"wkst\":1,\"interval\":2,\"byday\":\"SU\"}],[\"transp\",{},\"text\",\"OPAQUE\"],[\"x-apple-travel-advisory-behavior\",{},\"unknown\",\"AUTOMATIC\"]],[[\"valarm\",[[\"x-wr-alarmuid\",{},\"unknown\",\"7DC5904F-F700-4374-9918-7F400E70BD59\"],[\"uid\",{},\"text\",\"7DC5904F-F700-4374-9918-7F400E70BD59\"],[\"trigger\",{},\"duration\",\"-PT15H\"],[\"attach\",{},\"uri\",\"Basso\"],[\"action\",{},\"text\",\"AUDIO\"],[\"x-apple-default-alarm\",{},\"unknown\",\"TRUE\"],[\"acknowledged\",{},\"unknown\",\"20220828T132435Z\"]],[]],[\"valarm\",[[\"x-wr-alarmuid\",{},\"unknown\",\"267F51CC-69B0-4B38-ABCB-E115922724C0\"],[\"uid\",{},\"text\",\"267F51CC-69B0-4B38-ABCB-E115922724C0\"],[\"description\",{},\"text\",\"This is an event reminder\"],[\"acknowledged\",{},\"unknown\",\"20220828T132435Z\"],[\"trigger\",{},\"duration\",\"-PT10M\"],[\"action\",{},\"text\",\"DISPLAY\"]],[]]]],\"_rangeExceptionCache\":{},\"exceptions\":{},\"rangeExceptions\":[]},\"countdown\":{\"days\":1,\"hours\":10,\"minutes\":29,\"seconds\":59},\"on\":false}]",
        "payloadType": "json",
        "x": 110,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b9912d65.ec37c",
        "type": "telegram command",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "command": "/doors",
        "description": "",
        "registercommand": false,
        "language": "",
        "bot": "ae47c1e5.81626",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 100,
        "wires": [
            [
                "d227d6e8.191018"
            ],
            []
        ],
        "info": " - lock status for all locks\\n"
    },
    {
        "id": "9e47bc86.ec365",
        "type": "ha-get-entities",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "includes",
                "value": "lock.front_door,lock.back_door,binary_sensor.front_door_sensor_access_control_window_door_is_open,binary_sensor.back_door_sensor_access_control_window_door_is_open,binary_sensor.backyard_main_gate,binary_sensor.backyard_aux_gate",
                "valueType": "str",
                "condition": "state_object"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 470,
        "y": 100,
        "wires": [
            [
                "3f0ac6a8.3d017a"
            ]
        ]
    },
    {
        "id": "fdc68b47.e1f6b8",
        "type": "telegram sender",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "bot": "ae47c1e5.81626",
        "haserroroutput": false,
        "outputs": 1,
        "x": 740,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b2c30d09.12238",
        "type": "telegram command",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "command": "/lock",
        "description": "",
        "registercommand": false,
        "language": "",
        "bot": "ae47c1e5.81626",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 240,
        "wires": [
            [
                "c25751a3.8c36c"
            ],
            []
        ],
        "info": " <location>\\nUnlocks a door lock at named location. Valid entries are \\\"Front Door\\\" or \\\"Back Door\\\", case insensitive.\\n"
    },
    {
        "id": "85ddeabf.516648",
        "type": "api-call-service",
        "z": "2ca46b92.f4ef34",
        "name": "Lock/Unlock Door",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "data"
            }
        ],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "lock",
        "service": "",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "892bb124.e6627"
            ]
        ]
    },
    {
        "id": "d227d6e8.191018",
        "type": "link out",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "links": [
            "77e97d9d.eb7534"
        ],
        "x": 195,
        "y": 100,
        "wires": []
    },
    {
        "id": "77e97d9d.eb7534",
        "type": "link in",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "links": [
            "d227d6e8.191018",
            "4875cd94.1db024",
            "12fffdb0.448f52"
        ],
        "x": 355,
        "y": 100,
        "wires": [
            [
                "9e47bc86.ec365"
            ]
        ]
    },
    {
        "id": "892bb124.e6627",
        "type": "delay",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 740,
        "y": 260,
        "wires": [
            [
                "4875cd94.1db024"
            ]
        ]
    },
    {
        "id": "4875cd94.1db024",
        "type": "link out",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "links": [
            "77e97d9d.eb7534"
        ],
        "x": 855,
        "y": 260,
        "wires": []
    },
    {
        "id": "c0374270.0c875",
        "type": "telegram command",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "command": "/unlock",
        "description": "",
        "registercommand": false,
        "language": "",
        "bot": "ae47c1e5.81626",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 300,
        "wires": [
            [
                "c25751a3.8c36c"
            ],
            []
        ],
        "info": " <location>\\nUnlocks a door lock at named location. Valid entries are \\\"Front Door\\\" or \\\"Back Door\\\", case insensitive.\\n"
    },
    {
        "id": "c25751a3.8c36c",
        "type": "function",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "func": "var service;\nvar entity_id = \"unknown\";\n\nvar cmd_text = msg.originalMessage.text.trim();\n\nif (cmd_text.match(/^\\/lock/i)) {\n    service = \"lock\"\n} else if (cmd_text.match(/^\\/unlock/i)) {\n    service = \"unlock\";\n}\n\nvar door_text = msg.payload.content.trim();\n\nif (door_text.match(/front(\\s*?door)?/i)) {\n    entity_id = \"lock.front_door\";\n} else if (door_text.match(/back(\\s*?door)?/i)) {\n    entity_id = \"lock.back_door\";\n}\n\nmsg.topic = service;\nmsg.payload = {\n    service: service,\n    content: door_text,\n    data: {\n        \"entity_id\": entity_id\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 255,
        "y": 260,
        "wires": [
            [
                "e0f26150.aeecf"
            ]
        ],
        "l": false
    },
    {
        "id": "469784b1.dda3cc",
        "type": "comment",
        "z": "2ca46b92.f4ef34",
        "name": "Get status for all doors and locks",
        "info": "",
        "x": 190,
        "y": 60,
        "wires": []
    },
    {
        "id": "b8c6785f.da35a8",
        "type": "comment",
        "z": "2ca46b92.f4ef34",
        "name": "Lock or Unlock doors based on passed parameter",
        "info": "",
        "x": 250,
        "y": 200,
        "wires": []
    },
    {
        "id": "f796e4d3.4cee18",
        "type": "comment",
        "z": "2ca46b92.f4ef34",
        "name": "Get status of locks after operation",
        "info": "",
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "e0f26150.aeecf",
        "type": "switch",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "property": "payload.data.entity_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "unknown",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "unknown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 315,
        "y": 260,
        "wires": [
            [
                "85ddeabf.516648"
            ],
            [
                "63a93fd4.6e1f3"
            ]
        ],
        "l": false
    },
    {
        "id": "63a93fd4.6e1f3",
        "type": "template",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": \"{{originalMessage.chat.id}}\",\n    \"type\": \"message\",\n    \"content\": \"Unknown lock \\\"{{payload.content}}\\\"\"\n}",
        "output": "json",
        "x": 415,
        "y": 380,
        "wires": [
            [
                "9590156e.bccaf8"
            ]
        ],
        "l": false
    },
    {
        "id": "9590156e.bccaf8",
        "type": "telegram sender",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 560,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c4da9d28.4f957",
        "type": "comment",
        "z": "2ca46b92.f4ef34",
        "name": "Notify user of unrecognized lock name",
        "info": "",
        "x": 550,
        "y": 340,
        "wires": []
    },
    {
        "id": "c896f6e3.8df7e8",
        "type": "http request",
        "z": "2ca46b92.f4ef34",
        "name": "Get Telegram Flow",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://ha-server2:1880/flow/2ca46b92.f4ef34",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 600,
        "wires": [
            [
                "bf064e24.6fda9"
            ]
        ]
    },
    {
        "id": "bf064e24.6fda9",
        "type": "json",
        "z": "2ca46b92.f4ef34",
        "name": "Convert to JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 290,
        "y": 660,
        "wires": [
            [
                "66e35199.ae6f6"
            ]
        ]
    },
    {
        "id": "66e35199.ae6f6",
        "type": "function",
        "z": "2ca46b92.f4ef34",
        "name": "Filter to just \"/help\" command",
        "func": "function filter(item) {\n    return item.type === \"telegram command\" && item.command === \"/help\";\n}\n\nmsg.payload = msg.payload.nodes.filter(filter);\n\ninfo = msg.payload[0].info;\ninfo = info.replace(/(\\r\\n|\\n|\\r)/gm, \"\\\\n\");\ninfo = info.replace(/\\\"/g, \"\\\\\\\"\");\n\nmsg.payload[0].info = info;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 600,
        "wires": [
            [
                "e466fca2.4761b"
            ]
        ]
    },
    {
        "id": "886634c2.de76f8",
        "type": "telegram command",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "command": "/help",
        "description": "",
        "registercommand": false,
        "language": "",
        "bot": "ae47c1e5.81626",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 600,
        "wires": [
            [
                "c896f6e3.8df7e8"
            ],
            []
        ],
        "info": "*Available Commands:*\n\n*Locks*\n/doors - door and lock status for all doors\n\n/lock <location>\n/unlock <location>\nLocks or Unlocks a door lock at named location. Valid entries are \"Front Door\" or \"Back Door\", case insensitive.\n\n/lockall - Lock all locks\n\n/nav Provide either GPS coords or Ingress Intel link to have the Tesla navigate\n\n/help - Show this help"
    },
    {
        "id": "e466fca2.4761b",
        "type": "template",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": {{originalMessage.chat.id}},\n    \"type\": \"message\",\n    \"content\": \"{{#payload}}{{{info}}}{{/payload}}\",\n    \"options\": {\n        \"parse_mode\": \"Markdown\"\n    }\n}",
        "output": "json",
        "x": 755,
        "y": 600,
        "wires": [
            [
                "bda0d36b.f06aa"
            ]
        ],
        "l": false
    },
    {
        "id": "bda0d36b.f06aa",
        "type": "telegram sender",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 890,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "888a2f5b.2cdfd",
        "type": "telegram command",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "command": "/lockall",
        "description": "",
        "registercommand": false,
        "language": "",
        "bot": "ae47c1e5.81626",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 480,
        "wires": [
            [
                "130f7a83.cc3cc5"
            ],
            []
        ],
        "info": " - Lock all locks\\n"
    },
    {
        "id": "130f7a83.cc3cc5",
        "type": "ha-get-entities",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "server": "2e075c78.e96774",
        "version": 1,
        "rules": [
            {
                "property": "entity_id",
                "logic": "starts_with",
                "value": "lock.",
                "valueType": "str",
                "condition": "state_object"
            }
        ],
        "outputType": "array",
        "outputEmptyResults": false,
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "outputResultsCount": 1,
        "x": 290,
        "y": 480,
        "wires": [
            [
                "d0d47bae.d5fc18"
            ]
        ]
    },
    {
        "id": "2dacb26e.60a34e",
        "type": "api-call-service",
        "z": "2ca46b92.f4ef34",
        "name": "Lock Door",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": true,
        "action": "lock.lock",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "{{payload.entity_id}}"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "lock",
        "service": "lock",
        "x": 530,
        "y": 480,
        "wires": [
            [
                "2200a0fe.7433d"
            ]
        ]
    },
    {
        "id": "d0d47bae.d5fc18",
        "type": "split",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 415,
        "y": 480,
        "wires": [
            [
                "2dacb26e.60a34e"
            ]
        ],
        "l": false
    },
    {
        "id": "b0833ffc.d41c8",
        "type": "delay",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 760,
        "y": 480,
        "wires": [
            [
                "12fffdb0.448f52"
            ]
        ]
    },
    {
        "id": "12fffdb0.448f52",
        "type": "link out",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "links": [
            "77e97d9d.eb7534"
        ],
        "x": 875,
        "y": 480,
        "wires": []
    },
    {
        "id": "2200a0fe.7433d",
        "type": "join",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 655,
        "y": 480,
        "wires": [
            [
                "b0833ffc.d41c8"
            ]
        ],
        "l": false
    },
    {
        "id": "3f0ac6a8.3d017a",
        "type": "function",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "func": "const chatId =  msg.originalMessage.chat.id;\n\nconst doors = {\n    front: {\n        door: \"unknown\", lock: \"unknown\"\n    },\n    back: {\n        door: \"unknown\", lock: \"unknown\"\n    },\n    backyard_main_gate: \"unknown\",\n    backyard_aux_gate: \"unknown\"\n}\n\nfor (var i=0; i< msg.payload.length; i++) {\n    const friendly_name = msg.payload[i].attributes.friendly_name;\n    const state = msg.payload[i].state;\n    \n    const door_match = friendly_name.match(/^(Front|Back) Door Sensor/);\n    if (door_match) {\n        const door = door_match[1].toLowerCase();\n        let door_state = \"unknown\";\n        if (state === 'off') {\n            door_state = 'closed';\n        }\n        else if (state === 'on') {\n            door_state = 'open'\n        }\n        \n        doors[door].door = door_state;\n        continue;\n    }\n\n    const lock_match = friendly_name.match(/^(Front|Back) Door$/);\n    if (lock_match) {\n        const lock = lock_match[1].toLowerCase();\n        \n        doors[lock].lock = state;\n        continue;\n    }\n    \n    const gate_match = friendly_name.match(/^Backyard (Main|Aux) Gate$/);\n    if (gate_match) {\n        const gate_partial_name = gate_match[1].toLowerCase();\n        const gate_full_name = \"backyard_\" + gate_partial_name + \"_gate\"\n        \n        let gate_state = \"unknown\";\n        if (state === \"off\") {\n            gate_state = \"closed\";\n        }\n        else if (state === \"on\") {\n            gate_state = \"open\"\n        }\n        \n        doors[gate_full_name] = gate_state;\n        continue;\n    }\n}\n\nmsg.payload = {\n    chatId: chatId,\n    type: \"message\",\n    content: \"Front Door is \" + doors.front.door + \" and is \" + doors.front.lock + \"\\n\" + \n             \"Back Door is \" + doors.back.door + \" and is \" + doors.back.lock +\"\\n\" +\n             \"Backyard Main Gate is \" + doors.backyard_main_gate + \"\\n\" +\n             \"Backyard Aux Gate is \" + doors.backyard_aux_gate + \"\\n\"\n};\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 100,
        "wires": [
            [
                "fdc68b47.e1f6b8"
            ]
        ],
        "l": false
    },
    {
        "id": "9207fa157bdb6855",
        "type": "telegram command",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "command": "/stalker",
        "description": "",
        "registercommand": false,
        "language": "",
        "bot": "ae47c1e5.81626",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 110,
        "y": 1100,
        "wires": [
            [
                "bcae1b99f700c2c0"
            ],
            []
        ],
        "info": " - lock status for all locks\\n"
    },
    {
        "id": "dac099ac706cf9ca",
        "type": "telegram sender",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "bot": "ae47c1e5.81626",
        "haserroroutput": false,
        "outputs": 1,
        "x": 840,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "05accc129c6f91a4",
        "type": "comment",
        "z": "2ca46b92.f4ef34",
        "name": "Get status for all doors and locks",
        "info": "",
        "x": 190,
        "y": 1060,
        "wires": []
    },
    {
        "id": "bcae1b99f700c2c0",
        "type": "api-call-service",
        "z": "2ca46b92.f4ef34",
        "name": "Toggle snapshot",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.toggle",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.front_door_snapshot",
            "input_boolean.front_door_snapshot"
        ],
        "labelId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "toggle",
        "x": 280,
        "y": 1100,
        "wires": [
            [
                "be6872ebb83e1001"
            ]
        ]
    },
    {
        "id": "d3c51dfbf66b60ae",
        "type": "template",
        "z": "2ca46b92.f4ef34",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": \"{{originalMessage.chat.id}}\",\n    \"type\": \"message\",\n    \"content\": \"Front Door Snapshot is *{{payload}}*\",\n    \"options\": {\n        \"reply_to_message_id\": {{originalMessage.message_id}},\n        \"parse_mode\": \"Markdown\"\n    }\n}",
        "output": "json",
        "x": 705,
        "y": 1100,
        "wires": [
            [
                "dac099ac706cf9ca"
            ]
        ],
        "l": false
    },
    {
        "id": "be6872ebb83e1001",
        "type": "api-current-state",
        "z": "2ca46b92.f4ef34",
        "name": "Front Door Snapshot",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.front_door_snapshot",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 520,
        "y": 1100,
        "wires": [
            [
                "d3c51dfbf66b60ae"
            ]
        ]
    },
    {
        "id": "4b585ca9.9a2bd4",
        "type": "trigger-state",
        "z": "ae7a1c3d.11d2c",
        "name": "Bedroom Closet Activity",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.bedroom_closet_sensor_home_security_motion_detection"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 150,
        "y": 100,
        "wires": [
            [
                "3356332a.311c7c"
            ],
            []
        ]
    },
    {
        "id": "3356332a.311c7c",
        "type": "time-range-switch",
        "z": "ae7a1c3d.11d2c",
        "name": "Morning (6am-11am)",
        "lat": "",
        "lon": "",
        "startTime": "06:00",
        "endTime": "11:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 260,
        "y": 160,
        "wires": [
            [
                "ce5d9c6f.0b37b"
            ],
            []
        ]
    },
    {
        "id": "fce6ad04.c36ed",
        "type": "api-call-service",
        "z": "ae7a1c3d.11d2c",
        "name": "Turn Kettle On",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.stagg_kettle"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_on",
        "x": 720,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ce5d9c6f.0b37b",
        "type": "api-current-state",
        "z": "ae7a1c3d.11d2c",
        "name": "Has coffee been made?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.coffee_made",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "fce6ad04.c36ed"
            ],
            []
        ]
    },
    {
        "id": "182245d2.bc8f5a",
        "type": "trigger-state",
        "z": "ae7a1c3d.11d2c",
        "name": "Kettle Turned On",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 3,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "switch.stagg_kettle"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [],
        "customOutputs": [
            {
                "messageType": "custom",
                "messageValue": "{\"reset\": true}",
                "messageValueType": "json",
                "comparatorPropertyType": "current_state",
                "comparatorType": "is",
                "comparatorValue": "off",
                "comparatorValueDataType": "str",
                "comparatorPropertyValue": "new_state.state"
            }
        ],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 130,
        "y": 440,
        "wires": [
            [
                "26bdd57.c6d072a"
            ],
            [],
            [
                "26bdd57.c6d072a"
            ]
        ]
    },
    {
        "id": "26bdd57.c6d072a",
        "type": "delay",
        "z": "ae7a1c3d.11d2c",
        "name": "",
        "pauseType": "delay",
        "timeout": "45",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 410,
        "y": 440,
        "wires": [
            [
                "b5b33c0e.3622b"
            ]
        ]
    },
    {
        "id": "b5b33c0e.3622b",
        "type": "api-current-state",
        "z": "ae7a1c3d.11d2c",
        "name": "Is Kettle On?",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "on",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "switch.stagg_kettle",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 590,
        "y": 440,
        "wires": [
            [
                "d2018e50.e1e39"
            ],
            []
        ]
    },
    {
        "id": "d2018e50.e1e39",
        "type": "api-call-service",
        "z": "ae7a1c3d.11d2c",
        "name": "Turn Kettle Off",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.stagg_kettle"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_off",
        "x": 780,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "86f9aea0.d8cff",
        "type": "comment",
        "z": "ae7a1c3d.11d2c",
        "name": "Turn Kettle off after 45 minutes, if left on",
        "info": "",
        "x": 190,
        "y": 400,
        "wires": []
    },
    {
        "id": "8871b667.ab2808",
        "type": "comment",
        "z": "ae7a1c3d.11d2c",
        "name": "Turn Kettle on at first activity in bedroom closet",
        "info": "",
        "x": 220,
        "y": 60,
        "wires": []
    },
    {
        "id": "b01ddb1c.445108",
        "type": "api-call-service",
        "z": "ae7a1c3d.11d2c",
        "name": "Set Coffee Made",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.coffee_made"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 730,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "337bb18e.589d0e",
        "type": "time-range-switch",
        "z": "ae7a1c3d.11d2c",
        "name": "Morning (6am-11am)",
        "lat": "",
        "lon": "",
        "startTime": "06:00",
        "endTime": "11:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 420,
        "y": 280,
        "wires": [
            [
                "b01ddb1c.445108"
            ],
            []
        ]
    },
    {
        "id": "4089cc28.eb11d4",
        "type": "trigger-state",
        "z": "ae7a1c3d.11d2c",
        "name": "Kettle turned on",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "switch.stagg_kettle"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            },
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "previous_state",
                "propertyValue": "old_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "off"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 120,
        "y": 280,
        "wires": [
            [
                "337bb18e.589d0e"
            ],
            []
        ]
    },
    {
        "id": "b7f3eac3.e53098",
        "type": "comment",
        "z": "ae7a1c3d.11d2c",
        "name": "Set the \"Coffee Made\" boolean when the Kettle is turned on, either physically, or through automation",
        "info": "",
        "x": 380,
        "y": 240,
        "wires": []
    },
    {
        "id": "7133b29c.265dbc",
        "type": "trigger-state",
        "z": "3dfc2218.78acbe",
        "name": "Dog Food Opened",
        "server": "2e075c78.e96774",
        "version": 5,
        "inputs": 1,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "binary_sensor.dog_food_container_access_control_window_door_is_open"
            ],
            "substring": [],
            "regex": []
        },
        "debugEnabled": false,
        "constraints": [
            {
                "targetType": "this_entity",
                "targetValue": "",
                "propertyType": "current_state",
                "propertyValue": "new_state.state",
                "comparatorType": "is",
                "comparatorValueDatatype": "str",
                "comparatorValue": "on"
            }
        ],
        "customOutputs": [],
        "outputInitially": false,
        "stateType": "str",
        "enableInput": true,
        "exposeToHomeAssistant": false,
        "haConfig": [
            {
                "property": "name",
                "value": ""
            },
            {
                "property": "icon",
                "value": ""
            }
        ],
        "x": 150,
        "y": 140,
        "wires": [
            [
                "bb4c65e6.9ba518",
                "4c179d3e.5aa054"
            ],
            []
        ]
    },
    {
        "id": "28f09162.9b320e",
        "type": "schedex",
        "z": "3dfc2218.78acbe",
        "name": "Midnight",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "00:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "fe957b80.e93fe8",
                "8c5118a3.6081f"
            ]
        ]
    },
    {
        "id": "9e08a59f.94fff8",
        "type": "comment",
        "z": "3dfc2218.78acbe",
        "name": "Set MQTT topics based on dog food container being opened at certain times",
        "info": "",
        "x": 330,
        "y": 80,
        "wires": []
    },
    {
        "id": "3801847b.3f0dcc",
        "type": "comment",
        "z": "3dfc2218.78acbe",
        "name": "Reset Dog trackers at the end of the day",
        "info": "",
        "x": 220,
        "y": 1000,
        "wires": []
    },
    {
        "id": "7161ac9a.9627d4",
        "type": "mqtt out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "dog/fed/morning",
        "qos": "",
        "retain": "",
        "broker": "d6b350e1.1151a",
        "x": 650,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d9335df2.d3512",
        "type": "mqtt out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "dog/fed/evening",
        "qos": "",
        "retain": "",
        "broker": "d6b350e1.1151a",
        "x": 640,
        "y": 1100,
        "wires": []
    },
    {
        "id": "215c3a2c.a0cb46",
        "type": "mqtt out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "dog/walked/morning",
        "qos": "",
        "retain": "",
        "broker": "d6b350e1.1151a",
        "x": 660,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f5b38d97.80c15",
        "type": "mqtt out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "dog/walked/evening",
        "qos": "",
        "retain": "",
        "broker": "d6b350e1.1151a",
        "x": 660,
        "y": 1220,
        "wires": []
    },
    {
        "id": "18457bdd.b88294",
        "type": "mqtt in",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "frigate/front_door/dog/snapshot",
        "qos": "2",
        "datatype": "auto",
        "broker": "d6b350e1.1151a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 500,
        "wires": [
            [
                "41882250.9dc0fc",
                "f1f3aeb9.7e2c"
            ]
        ]
    },
    {
        "id": "2d05280c.2005a8",
        "type": "comment",
        "z": "3dfc2218.78acbe",
        "name": "Set some MQTT topics based on dog being detected at Front Door at certain times",
        "info": "",
        "x": 350,
        "y": 460,
        "wires": []
    },
    {
        "id": "41882250.9dc0fc",
        "type": "api-call-service",
        "z": "3dfc2218.78acbe",
        "name": "Set \"Dog walked today\"",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.dog_walked_today"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 550,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "762c408c.74cb9",
        "type": "api-call-service",
        "z": "3dfc2218.78acbe",
        "name": "Set \"Dog fed morning\"",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.dog_fed_morning"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 740,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "318d5720.f158b8",
        "type": "schedex",
        "z": "3dfc2218.78acbe",
        "name": "Evening dog fed check",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "20:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 160,
        "y": 800,
        "wires": [
            [
                "de69c5ad.e66cb8"
            ]
        ]
    },
    {
        "id": "de69c5ad.e66cb8",
        "type": "api-current-state",
        "z": "3dfc2218.78acbe",
        "name": "Check dog was fed",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "false",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.dog_fed_evening",
        "state_type": "habool",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 430,
        "y": 800,
        "wires": [
            [
                "68a88f16.7c4a5",
                "f054526e.d7042"
            ],
            []
        ]
    },
    {
        "id": "973ac097.71009",
        "type": "schedex",
        "z": "3dfc2218.78acbe",
        "name": "Morning dog fed check",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "11:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 170,
        "y": 700,
        "wires": [
            [
                "d9b4c3bb.7a52c"
            ]
        ]
    },
    {
        "id": "d9b4c3bb.7a52c",
        "type": "api-current-state",
        "z": "3dfc2218.78acbe",
        "name": "Check dog was fed",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "false",
        "halt_if_type": "bool",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.dog_fed_morning",
        "state_type": "habool",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 430,
        "y": 700,
        "wires": [
            [
                "93102c6e.4c6a1",
                "46115e74.3388d"
            ],
            []
        ]
    },
    {
        "id": "30987f99.7d752",
        "type": "schedex",
        "z": "3dfc2218.78acbe",
        "name": "Dog walked check",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "",
        "onoffset": "-30",
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": false,
        "sun": false,
        "x": 150,
        "y": 900,
        "wires": [
            [
                "eaad7fd9.44a56"
            ]
        ]
    },
    {
        "id": "eaad7fd9.44a56",
        "type": "api-current-state",
        "z": "3dfc2218.78acbe",
        "name": "Check dog was walked today",
        "server": "2e075c78.e96774",
        "version": 3,
        "outputs": 2,
        "halt_if": "off",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "input_boolean.dog_walked_today",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "x": 420,
        "y": 900,
        "wires": [
            [
                "e5896554.ca4468"
            ],
            []
        ]
    },
    {
        "id": "2243b236.6c014e",
        "type": "comment",
        "z": "3dfc2218.78acbe",
        "name": "Several checks and reminders to make sure Gabby is properly taken care of",
        "info": "",
        "x": 330,
        "y": 660,
        "wires": []
    },
    {
        "id": "1f6bef2a.853da1",
        "type": "change",
        "z": "3dfc2218.78acbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Gabby has not been fed this morning",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 675,
        "y": 700,
        "wires": [
            [
                "a24d3ed8.d65cd"
            ]
        ],
        "l": false
    },
    {
        "id": "ad6e7b11.0851a8",
        "type": "change",
        "z": "3dfc2218.78acbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Gabby has not been fed tonight",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 675,
        "y": 800,
        "wires": [
            [
                "d17dc517.873348"
            ]
        ],
        "l": false
    },
    {
        "id": "e5896554.ca4468",
        "type": "change",
        "z": "3dfc2218.78acbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Gabby has not been walked today",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 595,
        "y": 900,
        "wires": [
            [
                "ec45b49d48af175d"
            ]
        ],
        "l": false
    },
    {
        "id": "23e82996.2817f6",
        "type": "api-call-service",
        "z": "3dfc2218.78acbe",
        "name": "Set \"Dog fed evening\"",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "input_boolean.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "input_boolean.dog_fed_evening"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "input_boolean",
        "service": "turn_on",
        "x": 740,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fe957b80.e93fe8",
        "type": "change",
        "z": "3dfc2218.78acbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "qos",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 355,
        "y": 1060,
        "wires": [
            [
                "d9335df2.d3512",
                "215c3a2c.a0cb46",
                "f5b38d97.80c15",
                "7161ac9a.9627d4"
            ]
        ],
        "l": false
    },
    {
        "id": "f1f3aeb9.7e2c",
        "type": "time-range-switch",
        "z": "3dfc2218.78acbe",
        "name": "",
        "lat": "",
        "lon": "",
        "startTime": "06:00",
        "endTime": "12:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 510,
        "y": 500,
        "wires": [
            [
                "51321671.7d6958"
            ],
            [
                "92fd9f8e.7178d"
            ]
        ]
    },
    {
        "id": "51321671.7d6958",
        "type": "moment",
        "z": "3dfc2218.78acbe",
        "name": "Morning Walk",
        "topic": "dog/walked/morning",
        "input": "",
        "inputType": "date",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "h:mm:ss a",
        "locale": "en_US",
        "output": "",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 840,
        "y": 500,
        "wires": [
            [
                "253793b2.f3bbdc"
            ]
        ]
    },
    {
        "id": "92fd9f8e.7178d",
        "type": "moment",
        "z": "3dfc2218.78acbe",
        "name": "Evening Walk",
        "topic": "dog/walked/evening",
        "input": "",
        "inputType": "date",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "h:mm:ss a",
        "locale": "en_US",
        "output": "",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 840,
        "y": 560,
        "wires": [
            [
                "253793b2.f3bbdc"
            ]
        ]
    },
    {
        "id": "bb4c65e6.9ba518",
        "type": "time-range-switch",
        "z": "3dfc2218.78acbe",
        "name": "",
        "lat": "",
        "lon": "",
        "startTime": "06:00",
        "endTime": "12:00",
        "startOffset": 0,
        "endOffset": 0,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "23657468.0d517c",
                "762c408c.74cb9"
            ],
            [
                "98176bac.e186e8",
                "23e82996.2817f6"
            ]
        ]
    },
    {
        "id": "23657468.0d517c",
        "type": "moment",
        "z": "3dfc2218.78acbe",
        "name": "Morning",
        "topic": "dog/fed/morning",
        "input": "",
        "inputType": "date",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "h:mm:ss a",
        "locale": "en_US",
        "output": "",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 700,
        "y": 100,
        "wires": [
            [
                "adf02fc1.c2399"
            ]
        ]
    },
    {
        "id": "98176bac.e186e8",
        "type": "moment",
        "z": "3dfc2218.78acbe",
        "name": "Evening",
        "topic": "dog/fed/evening",
        "input": "",
        "inputType": "date",
        "inTz": "America/New_York",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "h:mm:ss a",
        "locale": "en_US",
        "output": "",
        "outputType": "msg",
        "outTz": "America/New_York",
        "x": 700,
        "y": 200,
        "wires": [
            [
                "14929372.d0dadd"
            ]
        ]
    },
    {
        "id": "dd0a7f50.4f9dd",
        "type": "inject",
        "z": "3dfc2218.78acbe",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "fe957b80.e93fe8"
            ]
        ]
    },
    {
        "id": "e1cdf947.c469e8",
        "type": "telegram sender",
        "z": "3dfc2218.78acbe",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 1350,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "b7c72404.d9d6e8",
        "type": "template",
        "z": "3dfc2218.78acbe",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": [\"321474212\", \"247971390\"],\n    \"type\": \"message\",\n    \"content\": \"{{topic}}\"\n}",
        "output": "json",
        "x": 1195,
        "y": 700,
        "wires": [
            [
                "e1cdf947.c469e8"
            ]
        ],
        "l": false
    },
    {
        "id": "5df546d.e31f9b8",
        "type": "link in",
        "z": "3dfc2218.78acbe",
        "name": "",
        "links": [
            "a24d3ed8.d65cd",
            "d17dc517.873348"
        ],
        "x": 1115,
        "y": 700,
        "wires": [
            [
                "b7c72404.d9d6e8"
            ]
        ]
    },
    {
        "id": "253793b2.f3bbdc",
        "type": "mqtt out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "broker": "d6b350e1.1151a",
        "x": 1050,
        "y": 520,
        "wires": []
    },
    {
        "id": "adf02fc1.c2399",
        "type": "mqtt out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d6b350e1.1151a",
        "x": 890,
        "y": 100,
        "wires": []
    },
    {
        "id": "14929372.d0dadd",
        "type": "mqtt out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d6b350e1.1151a",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "93102c6e.4c6a1",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Set ReminderSent to True",
        "func": "global.set(\"ReminderSent\", true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "a24d3ed8.d65cd",
        "type": "link out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "links": [
            "5df546d.e31f9b8"
        ],
        "x": 755,
        "y": 700,
        "wires": []
    },
    {
        "id": "d17dc517.873348",
        "type": "link out",
        "z": "3dfc2218.78acbe",
        "name": "",
        "links": [
            "5df546d.e31f9b8"
        ],
        "x": 755,
        "y": 800,
        "wires": []
    },
    {
        "id": "4c179d3e.5aa054",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Check ReminderSent",
        "func": "msg.payload = global.get(\"ReminderSent\");\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 360,
        "wires": [
            [
                "5d140abd.ff1b44"
            ]
        ]
    },
    {
        "id": "5d140abd.ff1b44",
        "type": "switch",
        "z": "3dfc2218.78acbe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 595,
        "y": 360,
        "wires": [
            [
                "4d3f6f46.c3621",
                "4e8af025.21ee9"
            ]
        ],
        "l": false
    },
    {
        "id": "4d3f6f46.c3621",
        "type": "change",
        "z": "3dfc2218.78acbe",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Gabby has been fed now.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "{\"disable_notification\":true}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 655,
        "y": 360,
        "wires": [
            [
                "141460b7.813507"
            ]
        ],
        "l": false
    },
    {
        "id": "3913b17d.420bee",
        "type": "comment",
        "z": "3dfc2218.78acbe",
        "name": "If ReminderSent boolean was true, send a message saying Gabby has now been fed",
        "info": "",
        "x": 630,
        "y": 320,
        "wires": []
    },
    {
        "id": "46115e74.3388d",
        "type": "switch",
        "z": "3dfc2218.78acbe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 595,
        "y": 700,
        "wires": [
            [
                "1f6bef2a.853da1"
            ]
        ],
        "l": false
    },
    {
        "id": "68a88f16.7c4a5",
        "type": "switch",
        "z": "3dfc2218.78acbe",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 595,
        "y": 800,
        "wires": [
            [
                "ad6e7b11.0851a8"
            ]
        ],
        "l": false
    },
    {
        "id": "f054526e.d7042",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Set ReminderSent to True",
        "func": "global.set(\"ReminderSent\", true);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "4e8af025.21ee9",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Set ReminderSent to False",
        "func": "global.set(\"ReminderSent\", false);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "8c5118a3.6081f",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Set ReminderSent to False",
        "func": "global.set(\"ReminderSent\", false);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "47b32701.bda968",
        "type": "telegram sender",
        "z": "3dfc2218.78acbe",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 1000,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "141460b7.813507",
        "type": "template",
        "z": "3dfc2218.78acbe",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": [\"321474212\", \"247971390\"],\n    \"type\": \"message\",\n    \"content\": \"{{topic}}\",\n    \"options\": {\n        \"disable_notification\": true\n    }\n}",
        "output": "json",
        "x": 775,
        "y": 360,
        "wires": [
            [
                "47b32701.bda968"
            ]
        ],
        "l": false
    },
    {
        "id": "7af572592b69ac0c",
        "type": "mqtt in",
        "z": "3dfc2218.78acbe",
        "name": "",
        "topic": "frigate/doorbell/dog/snapshot",
        "qos": "2",
        "datatype": "auto",
        "broker": "d6b350e1.1151a",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 180,
        "y": 560,
        "wires": [
            [
                "f1f3aeb9.7e2c",
                "41882250.9dc0fc"
            ]
        ]
    },
    {
        "id": "8ccf782b2ad37e33",
        "type": "telegram sender",
        "z": "3dfc2218.78acbe",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 820,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "ec45b49d48af175d",
        "type": "template",
        "z": "3dfc2218.78acbe",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": [\"321474212\"],\n    \"type\": \"message\",\n    \"content\": \"{{topic}}\"\n}",
        "output": "json",
        "x": 675,
        "y": 900,
        "wires": [
            [
                "8ccf782b2ad37e33"
            ]
        ],
        "l": false
    },
    {
        "id": "mqtt_morning",
        "type": "mqtt in",
        "z": "3dfc2218.78acbe",
        "name": "Morning Feed",
        "topic": "dog/fed/morning",
        "qos": "0",
        "datatype": "utf8",
        "broker": "d6b350e1.1151a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 1420,
        "wires": [
            [
                "process_morning"
            ]
        ]
    },
    {
        "id": "mqtt_evening",
        "type": "mqtt in",
        "z": "3dfc2218.78acbe",
        "name": "Evening Feed",
        "topic": "dog/fed/evening",
        "qos": "0",
        "datatype": "utf8",
        "broker": "d6b350e1.1151a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 1480,
        "wires": [
            [
                "process_evening"
            ]
        ]
    },
    {
        "id": "process_morning",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Process Morning",
        "func": "// Store morning feed time in flow context\nlet payload = msg.payload || \"\";\n\n// Handle blank/empty payloads\nif (typeof payload !== 'string') {\n    payload = String(payload);\n}\n\nflow.set('morning_feed', payload.trim());\n\nreturn null; // Don't pass message along",
        "outputs": 0,
        "x": 290,
        "y": 1420,
        "wires": []
    },
    {
        "id": "process_evening",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Process Evening",
        "func": "// Store evening feed time in flow context\nlet payload = msg.payload || \"\";\n\n// Handle blank/empty payloads\nif (typeof payload !== 'string') {\n    payload = String(payload);\n}\n\nflow.set('evening_feed', payload.trim());\n\nreturn null; // Don't pass message along",
        "outputs": 0,
        "x": 290,
        "y": 1480,
        "wires": []
    },
    {
        "id": "http_endpoint",
        "type": "http in",
        "z": "3dfc2218.78acbe",
        "name": "Dog Feed Status",
        "url": "/dog-feed-status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 1560,
        "wires": [
            [
                "build_response"
            ]
        ]
    },
    {
        "id": "build_response",
        "type": "function",
        "z": "3dfc2218.78acbe",
        "name": "Build JSON Response",
        "func": "// Get stored values from flow context\nlet morningFeed = flow.get('morning_feed');\nlet eveningFeed = flow.get('evening_feed');\n\n// Handle undefined/null values (topics that don't exist or haven't been received)\nif (morningFeed === undefined || morningFeed === null) {\n    morningFeed = null;\n}\n\nif (eveningFeed === undefined || eveningFeed === null) {\n    eveningFeed = null;\n}\n\n// Handle empty strings\nif (morningFeed === \"\") {\n    morningFeed = null;\n}\n\nif (eveningFeed === \"\") {\n    eveningFeed = null;\n}\n\n// Build response object\nconst response = {\n    \"dog_feed_status\": {\n        \"morning\": morningFeed,\n        \"evening\": eveningFeed,\n        \"last_updated\": new Date().toISOString()\n    }\n};\n\nmsg.payload = response;\nmsg.statusCode = 200;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1560,
        "wires": [
            [
                "http_response"
            ]
        ]
    },
    {
        "id": "http_response",
        "type": "http response",
        "z": "3dfc2218.78acbe",
        "name": "Send Response",
        "statusCode": "",
        "headers": {},
        "x": 560,
        "y": 1560,
        "wires": []
    },
    {
        "id": "9cacb80c.d90f28",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 420,
        "wires": [
            [
                "584e9ec1c80c5880"
            ]
        ]
    },
    {
        "id": "a2ee8c3f.7362d",
        "type": "change",
        "z": "d7b7b2ed.c0164",
        "name": "Set API Key",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\"AS-Key\":\"fz01Hug45jo3lhIhUjYt\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 420,
        "wires": [
            [
                "9cacb80c.d90f28"
            ]
        ]
    },
    {
        "id": "ed0b7682.f285e8",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Get Projects",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.todoist.com/rest/v1/projects",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "84bf142d.5ecf68"
            ]
        ]
    },
    {
        "id": "84bf142d.5ecf68",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Filter to Health and Fitness Project",
        "func": "let projects = JSON.parse(msg.payload)\n\nlet health_project = projects.filter(project => project.name === 'Personal Health and Wellness')\n\nif (health_project.length == 1) {\n    msg.payload = { \"project_id\": health_project[0].id }     \n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 140,
        "wires": [
            [
                "92692dd4.7d2408"
            ]
        ]
    },
    {
        "id": "3a0345c5.33544a",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Get Tasks for Project",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "https://api.todoist.com/rest/v1/tasks?",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "7b5b2ae.75b7b54",
                "8ae9ebff.849ff8"
            ]
        ]
    },
    {
        "id": "8ae9ebff.849ff8",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Get Push-ups Task",
        "func": "let tasks = JSON.parse(msg.payload)\n\nlet desiredTask = tasks.filter( task => task.content.includes('push-ups') )\n\nif (desiredTask.length == 1) {\n    msg.payload = desiredTask[0]\n}\nelse {\n    msg.payload = null\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            [
                "ec65afa5.0c6b88"
            ]
        ]
    },
    {
        "id": "272c5be4.ff5dd4",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Update Task",
        "func": "let id = msg.payload.id\nlet content = msg.payload.content\n\nmatch = content.match(/Do (\\d+) push-ups/)\nif (match) {\n    let num = parseInt(match[1]) + 1\n    content = `Do ${num} push-ups`\n}\n\nmsg.payload = {id: id, content: content}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 200,
        "wires": [
            [
                "fb9a9477.20ac38"
            ]
        ]
    },
    {
        "id": "fb9a9477.20ac38",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Send Update",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://api.todoist.com/rest/v1/tasks/{{{payload.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1050,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "92692dd4.7d2408",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload.project_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 595,
        "y": 140,
        "wires": [
            [
                "3a0345c5.33544a"
            ]
        ],
        "l": false
    },
    {
        "id": "ec65afa5.0c6b88",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 735,
        "y": 200,
        "wires": [
            [
                "272c5be4.ff5dd4"
            ]
        ],
        "l": false
    },
    {
        "id": "50981b8a.6e861c",
        "type": "schedex",
        "z": "d7b7b2ed.c0164",
        "d": true,
        "name": "Update Monday Morning",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "01:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": false,
        "wed": false,
        "thu": false,
        "fri": false,
        "sat": false,
        "sun": false,
        "x": 130,
        "y": 80,
        "wires": [
            [
                "ed0b7682.f285e8"
            ]
        ]
    },
    {
        "id": "7b5b2ae.75b7b54",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Get Plank Task",
        "func": "let tasks = JSON.parse(msg.payload)\n\nlet desiredTask = tasks.filter( task => task.content.startsWith(\"Do a plank\") )\n\nif (desiredTask.length == 1) {\n    msg.payload = desiredTask[0]\n}\nelse {\n    msg.payload = null\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 240,
        "wires": [
            [
                "793aa191.77d2e"
            ]
        ]
    },
    {
        "id": "dcff85a9.2a5a3",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Update Task",
        "func": "let id = msg.payload.id;\nlet content = msg.payload.content;\n\n// how many seconds to increase each week\nlet step = 1;\n\nmatch = content.match(/Do a plank for (\\d+):(\\d{1,2}):(\\d{1,2})/)\n\nif (match) {\n    let hours = parseInt(match[1]);\n    let mins = parseInt(match[2]);\n    let secs = parseInt(match[3]);\n    let seconds = (hours * 3600) + (mins * 60) + secs;\n\n    seconds += step;\n    \n    content = `Do a plank for ${new Date(seconds * 1000).toISOString().substr(11, 8)}`\n}\n\nmsg.payload = {id: id, content: content};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 240,
        "wires": [
            [
                "e0ec38b9.b7701"
            ]
        ]
    },
    {
        "id": "e0ec38b9.b7701",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Send Update",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://api.todoist.com/rest/v1/tasks/{{{payload.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 1050,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "793aa191.77d2e",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 735,
        "y": 240,
        "wires": [
            [
                "dcff85a9.2a5a3"
            ]
        ],
        "l": false
    },
    {
        "id": "c32580a7.92cbf",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Filter to Ingress Project",
        "func": "let projects = JSON.parse(msg.payload)\n\nlet ingress_project = projects.filter(project => project.name === 'Ingress')\n\nif (ingress_project.length == 1) {\n    msg.payload = { \"project_id\": ingress_project[0].id }     \n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 520,
        "wires": [
            [
                "2dc59da1.a7de0a"
            ]
        ]
    },
    {
        "id": "2dc59da1.a7de0a",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload.project_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 555,
        "y": 520,
        "wires": [
            [
                "fc77eb50.680b1"
            ]
        ],
        "l": false
    },
    {
        "id": "73d709d5.3c3bf",
        "type": "inject",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "ed0b7682.f285e8"
            ]
        ]
    },
    {
        "id": "fc77eb50.680b1",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Get Tasks for Project",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "https://api.todoist.com/rest/v2/tasks?",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 700,
        "y": 520,
        "wires": [
            [
                "ebcdff76.880db"
            ]
        ]
    },
    {
        "id": "6ccf5a90.9038cc",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Get Projects",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.todoist.com/rest/v2/projects",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 170,
        "y": 520,
        "wires": [
            [
                "c32580a7.92cbf"
            ]
        ]
    },
    {
        "id": "6e01a366.1bf09c",
        "type": "schedex",
        "z": "d7b7b2ed.c0164",
        "name": "Update Every Morning",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "01:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 120,
        "y": 320,
        "wires": [
            [
                "ca02b43b4c5f1358"
            ]
        ]
    },
    {
        "id": "e1f72ea2.1dabc8",
        "type": "comment",
        "z": "d7b7b2ed.c0164",
        "name": "Get Ingress Stats from agent-stats.com",
        "info": "",
        "x": 250,
        "y": 380,
        "wires": []
    },
    {
        "id": "a9a31312.34457",
        "type": "comment",
        "z": "d7b7b2ed.c0164",
        "name": "Get list of projects from Todoist",
        "info": "",
        "x": 230,
        "y": 480,
        "wires": []
    },
    {
        "id": "a2b2f7a1.b61e08",
        "type": "comment",
        "z": "d7b7b2ed.c0164",
        "name": "Get Ingress Project Tasks",
        "info": "",
        "x": 710,
        "y": 480,
        "wires": []
    },
    {
        "id": "11bffb4e.e5c5d5",
        "type": "comment",
        "z": "d7b7b2ed.c0164",
        "name": "Update Ingress Tasks with data from Agent-Stats",
        "info": "",
        "x": 280,
        "y": 580,
        "wires": []
    },
    {
        "id": "ebcdff76.880db",
        "type": "link out",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "links": [
            "a8c89d470682b3f7",
            "f6c9cad52c537b89"
        ],
        "x": 855,
        "y": 520,
        "wires": []
    },
    {
        "id": "1f19af0b.717931",
        "type": "comment",
        "z": "d7b7b2ed.c0164",
        "name": "Todoist API Token",
        "info": "80703ee51f20be680a89389b6c71c51549e271aa",
        "x": 1070,
        "y": 580,
        "wires": []
    },
    {
        "id": "811eb4c645fa832c",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Get Projects",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.todoist.com/rest/v1/projects",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 1100,
        "wires": [
            [
                "d68035d7a63894ce"
            ]
        ]
    },
    {
        "id": "d68035d7a63894ce",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Filter to Home Project",
        "func": "let projects = JSON.parse(msg.payload)\n\nlet home_project = projects.filter(project => project.name === 'Home')\n\nif (home_project.length == 1) {\n    msg.payload = { \"project_id\": home_project[0].id }     \n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1100,
        "wires": [
            [
                "24e2f723c231d51f"
            ]
        ]
    },
    {
        "id": "2c998082ca2f3db1",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Get Tasks for Project",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "https://api.todoist.com/rest/v1/tasks?",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 340,
        "y": 1160,
        "wires": [
            [
                "0006e1c0efc865f9"
            ]
        ]
    },
    {
        "id": "0006e1c0efc865f9",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Get Guest Sheets Task",
        "func": "let tasks = JSON.parse(msg.payload)\n\nlet topic = msg.topic\n\nlet desiredTask = tasks.filter( task => task.content.includes('Change Guest Sheets') )\n\nif (desiredTask.length == 1) {\n    msg.payload = desiredTask[0]\n}\nelse {\n    msg.payload = null\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1160,
        "wires": [
            [
                "2b1947ddc9ce7fa0"
            ]
        ]
    },
    {
        "id": "6000ba76e4422b63",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Update Task",
        "func": "let id = msg.payload.id\nlet content = msg.payload.content\n\nif (match = content.match(/Do (\\d+) push-ups/)) {\n    let num = parseInt(match[1]) + 1\n    content = `Do ${num} push-ups`\n}\n\nmsg.payload = {id: id, content: content}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1220,
        "wires": [
            [
                "714edce34085166f"
            ]
        ]
    },
    {
        "id": "714edce34085166f",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Send Update",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://api.todoist.com/rest/v1/tasks/{{{payload.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "x": 1070,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "24e2f723c231d51f",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload.project_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 675,
        "y": 1100,
        "wires": [
            [
                "2c998082ca2f3db1"
            ]
        ],
        "l": false
    },
    {
        "id": "daa7e44f6194dcad",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 755,
        "y": 1220,
        "wires": [
            [
                "6000ba76e4422b63"
            ]
        ],
        "l": false
    },
    {
        "id": "2b1947ddc9ce7fa0",
        "type": "debug",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ea69081e6b5347ad",
        "type": "server-state-changed",
        "z": "d7b7b2ed.c0164",
        "name": "Guests",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.guest_mode"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": true,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": true,
        "ignorePrevStateUnknown": true,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "Guest",
                "valueType": "str"
            }
        ],
        "x": 90,
        "y": 1100,
        "wires": [
            [
                "811eb4c645fa832c"
            ],
            []
        ]
    },
    {
        "id": "0b77b38617134296",
        "type": "server-state-changed",
        "z": "d7b7b2ed.c0164",
        "name": "Cameron",
        "server": "2e075c78.e96774",
        "version": 6,
        "outputs": 2,
        "exposeAsEntityConfig": "",
        "entities": {
            "entity": [
                "input_boolean.cameron_mode"
            ],
            "substring": [],
            "regex": []
        },
        "outputInitially": true,
        "stateType": "str",
        "ifState": "off",
        "ifStateType": "str",
        "ifStateOperator": "is",
        "outputOnlyOnStateChange": true,
        "for": 0,
        "forType": "num",
        "forUnits": "minutes",
        "ignorePrevStateNull": false,
        "ignorePrevStateUnknown": false,
        "ignorePrevStateUnavailable": false,
        "ignoreCurrentStateUnknown": false,
        "ignoreCurrentStateUnavailable": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "topic",
                "propertyType": "msg",
                "value": "Cameron",
                "valueType": "str"
            }
        ],
        "x": 100,
        "y": 1160,
        "wires": [
            [
                "811eb4c645fa832c"
            ],
            []
        ]
    },
    {
        "id": "10aac0547cf6fd13",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Get Reclaimer Task",
        "func": "let tasks = JSON.parse(msg.payload)\n\nlet desiredTask = tasks.filter(task => task.content.startsWith('Reclaim 35 Machina portals') )\n\nif (desiredTask.length == 1) {\n    msg.payload = desiredTask[0]\n}\nelse {\n    msg.payload = null\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 700,
        "wires": [
            [
                "6b9b7c858ce9b87e"
            ]
        ]
    },
    {
        "id": "9b0ab95c1a2be335",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Update Task",
        "func": "const id = msg.payload.id\n\nconst reclaimer_per_day = 35\n\nconst target = msg.ingress_stats.reclaimer + reclaimer_per_day\n\nconst content = `Reclaim ${reclaimer_per_day} Machina portals (Target: ${target.toLocaleString()})`\n\nmsg.payload = {id: id, content: content}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 700,
        "wires": [
            [
                "7c0dc2ffd669477c"
            ]
        ]
    },
    {
        "id": "7c0dc2ffd669477c",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Send Update",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://api.todoist.com/rest/v2/tasks/{{{payload.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "6b9b7c858ce9b87e",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 355,
        "y": 700,
        "wires": [
            [
                "9b0ab95c1a2be335"
            ]
        ],
        "l": false
    },
    {
        "id": "a8c89d470682b3f7",
        "type": "link in",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "links": [
            "ebcdff76.880db"
        ],
        "x": 55,
        "y": 700,
        "wires": [
            [
                "10aac0547cf6fd13"
            ]
        ]
    },
    {
        "id": "a3b62d06676bbbc5",
        "type": "inject",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 900,
        "wires": [
            [
                "ca02b43b4c5f1358"
            ]
        ]
    },
    {
        "id": "584e9ec1c80c5880",
        "type": "change",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ingress_stats",
                "pt": "msg",
                "to": "payload[0]",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "url",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "retry",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 420,
        "wires": [
            [
                "6ccf5a90.9038cc"
            ]
        ]
    },
    {
        "id": "ca02b43b4c5f1358",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "function 2",
        "func": "const url = \"https://api.agent-stats.com/history/\";\nconst d = new Date();\nd.setDate(d.getDate() - 1);\nlet dateStr = d.toISOString().substring(0, 10);\n\nmsg.url = `${url}${dateStr} 00:00:00`;\n//msg.url = \"https://api.agent-stats.com/history/2023-12-28 00:00:00\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "a2ee8c3f.7362d"
            ]
        ]
    },
    {
        "id": "72ae57d69db9b838",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Get Hacker Task",
        "func": "let tasks = JSON.parse(msg.payload)\n\nlet desiredTask = tasks.filter(task => task.content.startsWith('Hack 150 portals') )\n\nif (desiredTask.length == 1) {\n    msg.payload = desiredTask[0]\n}\nelse {\n    msg.payload = null\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 740,
        "wires": [
            [
                "a18a977579649a68"
            ]
        ]
    },
    {
        "id": "2193af2786fb21ef",
        "type": "function",
        "z": "d7b7b2ed.c0164",
        "name": "Update Task",
        "func": "const id = msg.payload.id\n\nconst hacks_per_day = 150\n\nconst target = msg.ingress_stats.hacker + hacks_per_day\n\nconst content = `Hack ${hacks_per_day} portals (Target: ${target.toLocaleString()})`\n\nmsg.payload = {id: id, content: content}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 740,
        "wires": [
            [
                "7c39992de4e5033a"
            ]
        ]
    },
    {
        "id": "7c39992de4e5033a",
        "type": "http request",
        "z": "d7b7b2ed.c0164",
        "name": "Send Update",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "body",
        "url": "https://api.todoist.com/rest/v2/tasks/{{{payload.id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 650,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "a18a977579649a68",
        "type": "switch",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 355,
        "y": 740,
        "wires": [
            [
                "2193af2786fb21ef"
            ]
        ],
        "l": false
    },
    {
        "id": "f6c9cad52c537b89",
        "type": "link in",
        "z": "d7b7b2ed.c0164",
        "name": "",
        "links": [
            "ebcdff76.880db"
        ],
        "x": 55,
        "y": 740,
        "wires": [
            [
                "72ae57d69db9b838"
            ]
        ]
    },
    {
        "id": "b479d9f385f0fb0f",
        "type": "schedex",
        "z": "cd0b9dd49c492d7a",
        "name": "Evening",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "sunset",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "-30",
        "onrandomoffset": 0,
        "offtime": "00:00",
        "offtopic": "",
        "offpayload": "off",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 120,
        "y": 320,
        "wires": [
            [
                "287c3ae4b55e5de0"
            ]
        ]
    },
    {
        "id": "3133457f6f7ee481",
        "type": "switch",
        "z": "cd0b9dd49c492d7a",
        "name": "On / Off",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 320,
        "wires": [
            [
                "1a9c0a3afde8ec24"
            ],
            [
                "b74538b79b245ed5"
            ]
        ]
    },
    {
        "id": "1a9c0a3afde8ec24",
        "type": "api-call-service",
        "z": "cd0b9dd49c492d7a",
        "name": "Turn on Outdoor Christmas lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.seasonal_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_on",
        "x": 840,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b74538b79b245ed5",
        "type": "api-call-service",
        "z": "cd0b9dd49c492d7a",
        "name": "Turn off Outdoor Christmas lights",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "switch.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "switch.seasonal_lights"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "switch",
        "service": "turn_off",
        "x": 840,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "287c3ae4b55e5de0",
        "type": "function",
        "z": "cd0b9dd49c492d7a",
        "name": "Is it December?",
        "func": "let today = new Date()\nlet month = today.getMonth() + 1\n\nmsg.december = month == 12;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "53f80ab1f61be5da"
            ]
        ]
    },
    {
        "id": "53f80ab1f61be5da",
        "type": "switch",
        "z": "cd0b9dd49c492d7a",
        "name": "",
        "property": "december",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 455,
        "y": 320,
        "wires": [
            [
                "3133457f6f7ee481"
            ]
        ],
        "l": false
    },
    {
        "id": "9e34b4c568c85ec0",
        "type": "inject",
        "z": "cd0b9dd49c492d7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "287c3ae4b55e5de0"
            ]
        ]
    },
    {
        "id": "3b2b79fbc637a302",
        "type": "inject",
        "z": "cd0b9dd49c492d7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "287c3ae4b55e5de0"
            ]
        ]
    },
    {
        "id": "251aabf120633104",
        "type": "schedex",
        "z": "cd0b9dd49c492d7a",
        "name": "Morning",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "07:00",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "",
        "onrandomoffset": 0,
        "offtime": "10:00",
        "offtopic": "",
        "offpayload": "off",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "852059ec278920c1"
            ]
        ]
    },
    {
        "id": "0a4dc57c57fe0010",
        "type": "switch",
        "z": "cd0b9dd49c492d7a",
        "name": "On / Off",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 100,
        "wires": [
            [
                "fc29d92bd164f3ee"
            ],
            [
                "49f7ed4192c9ba34"
            ]
        ]
    },
    {
        "id": "fc29d92bd164f3ee",
        "type": "api-call-service",
        "z": "cd0b9dd49c492d7a",
        "name": "Turn on Christmas Tree",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_on",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.christmas_tree_2"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_on",
        "x": 810,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "49f7ed4192c9ba34",
        "type": "api-call-service",
        "z": "cd0b9dd49c492d7a",
        "name": "Turn off Christmas Tree",
        "server": "2e075c78.e96774",
        "version": 7,
        "debugenabled": false,
        "action": "light.turn_off",
        "floorId": [],
        "areaId": [],
        "deviceId": [],
        "entityId": [
            "light.christmas_tree_2"
        ],
        "labelId": [],
        "data": "",
        "dataType": "json",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "blockInputOverrides": false,
        "domain": "light",
        "service": "turn_off",
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "852059ec278920c1",
        "type": "function",
        "z": "cd0b9dd49c492d7a",
        "name": "Is it December?",
        "func": "let today = new Date()\nlet month = today.getMonth() + 1\n\nmsg.december = month == 12;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "c2500b536379c880"
            ]
        ]
    },
    {
        "id": "c2500b536379c880",
        "type": "switch",
        "z": "cd0b9dd49c492d7a",
        "name": "",
        "property": "december",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 455,
        "y": 100,
        "wires": [
            [
                "0a4dc57c57fe0010"
            ]
        ],
        "l": false
    },
    {
        "id": "020d266a470a2383",
        "type": "inject",
        "z": "cd0b9dd49c492d7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "on",
        "payloadType": "str",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "852059ec278920c1"
            ]
        ]
    },
    {
        "id": "294fb4a1498ec3b6",
        "type": "inject",
        "z": "cd0b9dd49c492d7a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "off",
        "payloadType": "str",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "852059ec278920c1"
            ]
        ]
    },
    {
        "id": "a42d19a23bd07911",
        "type": "schedex",
        "z": "cd0b9dd49c492d7a",
        "name": "Evening",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "38.873568",
        "lon": "-77.118037",
        "ontime": "17:00",
        "ontopic": "",
        "onpayload": "on",
        "onoffset": "",
        "onrandomoffset": 0,
        "offtime": "22:00",
        "offtopic": "",
        "offpayload": "off",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 100,
        "y": 100,
        "wires": [
            [
                "852059ec278920c1"
            ]
        ]
    },
    {
        "id": "3e9fc8a05caeb057",
        "type": "http request",
        "z": "eaeda760a3cb9be7",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "43485577b2059a46"
            ]
        ]
    },
    {
        "id": "f52d7cdc28968002",
        "type": "inject",
        "z": "eaeda760a3cb9be7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "4501623dca875daa"
            ]
        ]
    },
    {
        "id": "4501623dca875daa",
        "type": "change",
        "z": "eaeda760a3cb9be7",
        "name": "Set API Key",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\"AS-Key\":\"fz01Hug45jo3lhIhUjYt\"}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "https://api.agent-stats.com/history/2021-04-29 00:00:00",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "3e9fc8a05caeb057"
            ]
        ]
    },
    {
        "id": "dab8ab4602dfd9c1",
        "type": "schedex",
        "z": "eaeda760a3cb9be7",
        "name": "Update Every Morning",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "",
        "lon": "",
        "ontime": "01:00",
        "ontopic": "",
        "onpayload": "",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": 0,
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 140,
        "y": 120,
        "wires": [
            [
                "4501623dca875daa"
            ]
        ]
    },
    {
        "id": "43485577b2059a46",
        "type": "function",
        "z": "eaeda760a3cb9be7",
        "name": "Save Agent Stats in msg",
        "func": "let json_data = JSON.parse(msg.payload)\n\nmsg = {\n    agent_stats_scout: json_data[json_data.length-1][\"scout\"],\n    agent_stats_scout_controller: json_data[json_data.length - 1][\"scout_controller\"]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "6c0dd7bee670fc7a"
            ]
        ]
    },
    {
        "id": "1b37d3c60258da93",
        "type": "comment",
        "z": "eaeda760a3cb9be7",
        "name": "Get Ingress Stats from agent-stats.com",
        "info": "",
        "x": 270,
        "y": 180,
        "wires": []
    },
    {
        "id": "6c0dd7bee670fc7a",
        "type": "GSheet",
        "z": "eaeda760a3cb9be7",
        "creds": "757ea1f25f0997a0",
        "method": "get",
        "action": "",
        "sheet": "1CpgvxzyArwLH7Wb48PeN2CRsxi189hUzonP3mSQSWW8",
        "cells": "Sheet1!B2:B3",
        "flatten": false,
        "name": "Get Sheets Numbers",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "863bc2fe2615a596"
            ]
        ]
    },
    {
        "id": "d256bbb4dc3335f6",
        "type": "comment",
        "z": "eaeda760a3cb9be7",
        "name": "Get Scout numbers from Google Sheet",
        "info": "",
        "x": 270,
        "y": 280,
        "wires": []
    },
    {
        "id": "863bc2fe2615a596",
        "type": "change",
        "z": "eaeda760a3cb9be7",
        "name": "Move Sheets numbers",
        "rules": [
            {
                "t": "set",
                "p": "sheets_scout",
                "pt": "msg",
                "to": "$number(payload[0][0])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "sheets_scout_controller",
                "pt": "msg",
                "to": "$number(payload[1][0])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[\t    [$string(msg.agent_stats_scout)], \t    [$string(msg.agent_stats_scout_controller)]\t]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 320,
        "wires": [
            [
                "6e9b140fe692ed36"
            ]
        ]
    },
    {
        "id": "6e9b140fe692ed36",
        "type": "switch",
        "z": "eaeda760a3cb9be7",
        "name": "",
        "property": "agent_stats_scout",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "sheets_scout",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 615,
        "y": 320,
        "wires": [
            [
                "bfbd04d9d682bbb0"
            ]
        ],
        "l": false
    },
    {
        "id": "afb4fa70822c762b",
        "type": "comment",
        "z": "eaeda760a3cb9be7",
        "name": "If Scout is higher...",
        "info": "",
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "bfbd04d9d682bbb0",
        "type": "GSheet",
        "z": "eaeda760a3cb9be7",
        "creds": "757ea1f25f0997a0",
        "method": "update",
        "action": "",
        "sheet": "1CpgvxzyArwLH7Wb48PeN2CRsxi189hUzonP3mSQSWW8",
        "cells": "Sheet1!B2:B3",
        "flatten": true,
        "name": "Set Sheets Numbers",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "39835fb7d9e315cd"
            ]
        ]
    },
    {
        "id": "9cf12e7531103f8b",
        "type": "comment",
        "z": "eaeda760a3cb9be7",
        "name": "Update Google Sheets with new numbers from Agent Stats",
        "info": "",
        "x": 340,
        "y": 380,
        "wires": []
    },
    {
        "id": "096193a1d0d5dca6",
        "type": "telegram sender",
        "z": "eaeda760a3cb9be7",
        "name": "",
        "bot": "ae47c1e5.81626",
        "outputs": 1,
        "x": 540,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "cd333e832e46d795",
        "type": "template",
        "z": "eaeda760a3cb9be7",
        "name": "Compose message",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"chatId\": [\"321474212\"],\n    \"type\": \"message\",\n    \"content\": \"{{payload}}\",\n    \"options\": {\n        \"parse_mode\": \"Markdown\"\n    }\n}",
        "output": "json",
        "x": 395,
        "y": 560,
        "wires": [
            [
                "096193a1d0d5dca6"
            ]
        ],
        "l": false
    },
    {
        "id": "7719f5b98dc91ee0",
        "type": "template",
        "z": "eaeda760a3cb9be7",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "*Scout:* {{scout}}\n*Scout Controller:* {{scout_controller}}\n\n*Remaining:*\n*Volatiles:* {{volatiles_remaining}}  *Regular:* {{regular_remaining}}  *Total:* {{total_remaining}}\n*Days until {{target_date}}:* {{days_remaining}}\n*Scans per day:  Vol:* {{volatile_scans_per_day}}  *Reg:* {{regular_scans_per_day}}\n\n*Ratio:* {{ratio}} (Perfect: 2.0)",
        "output": "str",
        "x": 280,
        "y": 560,
        "wires": [
            [
                "cd333e832e46d795"
            ]
        ]
    },
    {
        "id": "39835fb7d9e315cd",
        "type": "GSheet",
        "z": "eaeda760a3cb9be7",
        "creds": "757ea1f25f0997a0",
        "method": "get",
        "action": "",
        "sheet": "1CpgvxzyArwLH7Wb48PeN2CRsxi189hUzonP3mSQSWW8",
        "cells": "Sheet1!B2:H23",
        "flatten": false,
        "name": "Get Sheets Numbers",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "c595631beb94c1ac"
            ]
        ]
    },
    {
        "id": "c595631beb94c1ac",
        "type": "change",
        "z": "eaeda760a3cb9be7",
        "name": "Set Values from Sheets",
        "rules": [
            {
                "t": "set",
                "p": "scout",
                "pt": "msg",
                "to": "$number(payload[0][0])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "scout_controller",
                "pt": "msg",
                "to": "$number(payload[1][0])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "volatiles_remaining",
                "pt": "msg",
                "to": "$number(payload[4][5])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "regular_remaining",
                "pt": "msg",
                "to": "$number(payload[5][5])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "total_remaining",
                "pt": "msg",
                "to": "$number(payload[7][5])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "ratio",
                "pt": "msg",
                "to": "$number(payload[4][6])",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "target_date",
                "pt": "msg",
                "to": "payload[19][0]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "days_remaining",
                "pt": "msg",
                "to": "payload[19][2]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "regular_scans_per_day",
                "pt": "msg",
                "to": "payload[21][1]",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "volatile_scans_per_day",
                "pt": "msg",
                "to": "payload[21][2]",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 500,
        "wires": [
            [
                "7719f5b98dc91ee0"
            ]
        ]
    },
    {
        "id": "4f51014f29152cc0",
        "type": "inject",
        "z": "eaeda760a3cb9be7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 640,
        "wires": [
            [
                "4501623dca875daa"
            ]
        ]
    },
    {
        "id": "ce9a06755d6695a6",
        "type": "telegram command",
        "z": "eaeda760a3cb9be7",
        "name": "",
        "command": "/scout",
        "description": "",
        "registercommand": false,
        "language": "",
        "scope": "default",
        "bot": "ae47c1e5.81626",
        "strict": false,
        "hasresponse": true,
        "useregex": false,
        "removeregexcommand": false,
        "outputs": 2,
        "x": 70,
        "y": 600,
        "wires": [
            [
                "39835fb7d9e315cd"
            ],
            []
        ]
    },
    {
        "id": "64c995f0808eef31",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "HTTP healthcheck response",
        "func": "msg.payload = \"OK\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "f3da0fdf99cbba3e"
            ]
        ]
    },
    {
        "id": "fbb28db39f5f56fc",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "healthcheck API",
        "url": "/health",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "64c995f0808eef31"
            ]
        ]
    },
    {
        "id": "f3da0fdf99cbba3e",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "HealthCheckNode",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 120,
        "wires": []
    }
]